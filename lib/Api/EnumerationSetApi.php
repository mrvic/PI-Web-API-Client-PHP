<?php
/**
 * EnumerationSetApi
 * PHP version 5
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PI Web API 2017 Swagger Spec
 *
 * Swagger Spec file that describes PI Web API
 *
 * OpenAPI spec version: 1.9.0.235
 * Contact: techsupport@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PIWebAPI\Client\Api;

use \PIWebAPI\Client\ApiClient;
use \PIWebAPI\Client\ApiException;
use \PIWebAPI\Client\Configuration;
use \PIWebAPI\Client\ObjectSerializer;

/**
 * EnumerationSetApi Class Doc Comment
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnumerationSetApi
{
    /**
     * API Client
     *
     * @var \PIWebAPI\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \PIWebAPI\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\PIWebAPI\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://proghackuc2017.osisoft.com/piwebapi');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \PIWebAPI\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \PIWebAPI\Client\ApiClient $apiClient set the API client
     *
     * @return EnumerationSetApi
     */
    public function setApiClient(\PIWebAPI\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation enumerationSetCreateSecurityEntry
     *
     * Create a security entry owned by the enumeration set.
     *
     * @param string $web_id The ID of the enumeration set where the security entry will be created. (required)
     * @param \PIWebAPI\Client\Model\SecurityEntry $security_entry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function enumerationSetCreateSecurityEntry($web_id, $security_entry, $apply_to_children = null)
    {
        list($response) = $this->enumerationSetCreateSecurityEntryWithHttpInfo($web_id, $security_entry, $apply_to_children);
        return $response;
    }

    /**
     * Operation enumerationSetCreateSecurityEntryWithHttpInfo
     *
     * Create a security entry owned by the enumeration set.
     *
     * @param string $web_id The ID of the enumeration set where the security entry will be created. (required)
     * @param \PIWebAPI\Client\Model\SecurityEntry $security_entry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function enumerationSetCreateSecurityEntryWithHttpInfo($web_id, $security_entry, $apply_to_children = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling enumerationSetCreateSecurityEntry');
        }
        // verify the required parameter 'security_entry' is set
        if ($security_entry === null) {
            throw new \InvalidArgumentException('Missing the required parameter $security_entry when calling enumerationSetCreateSecurityEntry');
        }
        // parse inputs
        $resourcePath = "/enumerationsets/{webId}/securityentries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // query params
        if ($apply_to_children !== null) {
            $queryParams['applyToChildren'] = $this->apiClient->getSerializer()->toQueryValue($apply_to_children);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($security_entry)) {
            $_tempBody = $security_entry;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/enumerationsets/{webId}/securityentries'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation enumerationSetCreateValue
     *
     * Create an enumeration value for a enumeration set.
     *
     * @param string $web_id The ID of the enumeration set on which to create the enumeration value. (required)
     * @param \PIWebAPI\Client\Model\EnumerationValue $enumeration_value The new enumeration value definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function enumerationSetCreateValue($web_id, $enumeration_value)
    {
        list($response) = $this->enumerationSetCreateValueWithHttpInfo($web_id, $enumeration_value);
        return $response;
    }

    /**
     * Operation enumerationSetCreateValueWithHttpInfo
     *
     * Create an enumeration value for a enumeration set.
     *
     * @param string $web_id The ID of the enumeration set on which to create the enumeration value. (required)
     * @param \PIWebAPI\Client\Model\EnumerationValue $enumeration_value The new enumeration value definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function enumerationSetCreateValueWithHttpInfo($web_id, $enumeration_value)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling enumerationSetCreateValue');
        }
        // verify the required parameter 'enumeration_value' is set
        if ($enumeration_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $enumeration_value when calling enumerationSetCreateValue');
        }
        // parse inputs
        $resourcePath = "/enumerationsets/{webId}/enumerationvalues";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($enumeration_value)) {
            $_tempBody = $enumeration_value;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/enumerationsets/{webId}/enumerationvalues'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation enumerationSetDelete
     *
     * Delete an enumeration set.
     *
     * @param string $web_id The ID of the enumeration set to delete. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function enumerationSetDelete($web_id)
    {
        list($response) = $this->enumerationSetDeleteWithHttpInfo($web_id);
        return $response;
    }

    /**
     * Operation enumerationSetDeleteWithHttpInfo
     *
     * Delete an enumeration set.
     *
     * @param string $web_id The ID of the enumeration set to delete. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function enumerationSetDeleteWithHttpInfo($web_id)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling enumerationSetDelete');
        }
        // parse inputs
        $resourcePath = "/enumerationsets/{webId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/enumerationsets/{webId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation enumerationSetDeleteSecurityEntry
     *
     * Delete a security entry owned by the enumeration set.
     *
     * @param string $name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param string $web_id The ID of the enumeration set where the security entry will be deleted. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function enumerationSetDeleteSecurityEntry($name, $web_id, $apply_to_children = null)
    {
        list($response) = $this->enumerationSetDeleteSecurityEntryWithHttpInfo($name, $web_id, $apply_to_children);
        return $response;
    }

    /**
     * Operation enumerationSetDeleteSecurityEntryWithHttpInfo
     *
     * Delete a security entry owned by the enumeration set.
     *
     * @param string $name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param string $web_id The ID of the enumeration set where the security entry will be deleted. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function enumerationSetDeleteSecurityEntryWithHttpInfo($name, $web_id, $apply_to_children = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling enumerationSetDeleteSecurityEntry');
        }
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling enumerationSetDeleteSecurityEntry');
        }
        // parse inputs
        $resourcePath = "/enumerationsets/{webId}/securityentries/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apply_to_children !== null) {
            $queryParams['applyToChildren'] = $this->apiClient->getSerializer()->toQueryValue($apply_to_children);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/enumerationsets/{webId}/securityentries/{name}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation enumerationSetGet
     *
     * Retrieve an enumeration set.
     *
     * @param string $web_id The ID of the enumeration set. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\EnumerationSet
     */
    public function enumerationSetGet($web_id, $selected_fields = null)
    {
        list($response) = $this->enumerationSetGetWithHttpInfo($web_id, $selected_fields);
        return $response;
    }

    /**
     * Operation enumerationSetGetWithHttpInfo
     *
     * Retrieve an enumeration set.
     *
     * @param string $web_id The ID of the enumeration set. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\EnumerationSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function enumerationSetGetWithHttpInfo($web_id, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling enumerationSetGet');
        }
        // parse inputs
        $resourcePath = "/enumerationsets/{webId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\EnumerationSet',
                '/enumerationsets/{webId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\EnumerationSet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\EnumerationSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation enumerationSetGetByPath
     *
     * Retrieve an enumeration set by path.
     *
     * @param string $path The path to the target enumeration set. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\EnumerationSet
     */
    public function enumerationSetGetByPath($path, $selected_fields = null)
    {
        list($response) = $this->enumerationSetGetByPathWithHttpInfo($path, $selected_fields);
        return $response;
    }

    /**
     * Operation enumerationSetGetByPathWithHttpInfo
     *
     * Retrieve an enumeration set by path.
     *
     * @param string $path The path to the target enumeration set. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\EnumerationSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function enumerationSetGetByPathWithHttpInfo($path, $selected_fields = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling enumerationSetGetByPath');
        }
        // parse inputs
        $resourcePath = "/enumerationsets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\EnumerationSet',
                '/enumerationsets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\EnumerationSet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\EnumerationSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation enumerationSetGetSecurity
     *
     * Get the security information of the specified security item associated with the enumeration set for a specified user.
     *
     * @param string $web_id The ID of the enumeration set for the security to be checked. (required)
     * @param string[] $user_identity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param bool $force_refresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsSecurityRights
     */
    public function enumerationSetGetSecurity($web_id, $user_identity, $force_refresh = null, $selected_fields = null)
    {
        list($response) = $this->enumerationSetGetSecurityWithHttpInfo($web_id, $user_identity, $force_refresh, $selected_fields);
        return $response;
    }

    /**
     * Operation enumerationSetGetSecurityWithHttpInfo
     *
     * Get the security information of the specified security item associated with the enumeration set for a specified user.
     *
     * @param string $web_id The ID of the enumeration set for the security to be checked. (required)
     * @param string[] $user_identity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param bool $force_refresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsSecurityRights, HTTP status code, HTTP response headers (array of strings)
     */
    public function enumerationSetGetSecurityWithHttpInfo($web_id, $user_identity, $force_refresh = null, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling enumerationSetGetSecurity');
        }
        // verify the required parameter 'user_identity' is set
        if ($user_identity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_identity when calling enumerationSetGetSecurity');
        }
        // parse inputs
        $resourcePath = "/enumerationsets/{webId}/security";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($user_identity)) {
            $user_identity = $this->apiClient->getSerializer()->serializeCollection($user_identity, 'multi', true);
        }
        if ($user_identity !== null) {
            $queryParams['userIdentity'] = $this->apiClient->getSerializer()->toQueryValue($user_identity);
        }
        // query params
        if ($force_refresh !== null) {
            $queryParams['forceRefresh'] = $this->apiClient->getSerializer()->toQueryValue($force_refresh);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsSecurityRights',
                '/enumerationsets/{webId}/security'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsSecurityRights', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsSecurityRights', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation enumerationSetGetSecurityEntries
     *
     * Retrieve the security entries associated with the enumeration set based on the specified criteria. By default, all security entries for this enumeration set are returned.
     *
     * @param string $web_id The ID of the enumeration set. (required)
     * @param string $name_filter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsSecurityEntry
     */
    public function enumerationSetGetSecurityEntries($web_id, $name_filter = null, $selected_fields = null)
    {
        list($response) = $this->enumerationSetGetSecurityEntriesWithHttpInfo($web_id, $name_filter, $selected_fields);
        return $response;
    }

    /**
     * Operation enumerationSetGetSecurityEntriesWithHttpInfo
     *
     * Retrieve the security entries associated with the enumeration set based on the specified criteria. By default, all security entries for this enumeration set are returned.
     *
     * @param string $web_id The ID of the enumeration set. (required)
     * @param string $name_filter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsSecurityEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function enumerationSetGetSecurityEntriesWithHttpInfo($web_id, $name_filter = null, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling enumerationSetGetSecurityEntries');
        }
        // parse inputs
        $resourcePath = "/enumerationsets/{webId}/securityentries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($name_filter !== null) {
            $queryParams['nameFilter'] = $this->apiClient->getSerializer()->toQueryValue($name_filter);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsSecurityEntry',
                '/enumerationsets/{webId}/securityentries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsSecurityEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsSecurityEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation enumerationSetGetSecurityEntryByName
     *
     * Retrieve the security entry associated with the enumeration set with the specified name.
     *
     * @param string $name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param string $web_id The ID of the enumeration set. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\SecurityEntry
     */
    public function enumerationSetGetSecurityEntryByName($name, $web_id, $selected_fields = null)
    {
        list($response) = $this->enumerationSetGetSecurityEntryByNameWithHttpInfo($name, $web_id, $selected_fields);
        return $response;
    }

    /**
     * Operation enumerationSetGetSecurityEntryByNameWithHttpInfo
     *
     * Retrieve the security entry associated with the enumeration set with the specified name.
     *
     * @param string $name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param string $web_id The ID of the enumeration set. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\SecurityEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function enumerationSetGetSecurityEntryByNameWithHttpInfo($name, $web_id, $selected_fields = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling enumerationSetGetSecurityEntryByName');
        }
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling enumerationSetGetSecurityEntryByName');
        }
        // parse inputs
        $resourcePath = "/enumerationsets/{webId}/securityentries/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\SecurityEntry',
                '/enumerationsets/{webId}/securityentries/{name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\SecurityEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\SecurityEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation enumerationSetGetValues
     *
     * Retrieve an enumeration set's values.
     *
     * @param string $web_id The ID of the enumeration set. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsEnumerationValue
     */
    public function enumerationSetGetValues($web_id, $selected_fields = null)
    {
        list($response) = $this->enumerationSetGetValuesWithHttpInfo($web_id, $selected_fields);
        return $response;
    }

    /**
     * Operation enumerationSetGetValuesWithHttpInfo
     *
     * Retrieve an enumeration set's values.
     *
     * @param string $web_id The ID of the enumeration set. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsEnumerationValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function enumerationSetGetValuesWithHttpInfo($web_id, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling enumerationSetGetValues');
        }
        // parse inputs
        $resourcePath = "/enumerationsets/{webId}/enumerationvalues";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsEnumerationValue',
                '/enumerationsets/{webId}/enumerationvalues'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsEnumerationValue', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsEnumerationValue', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation enumerationSetUpdate
     *
     * Update an enumeration set by replacing items in its definition.
     *
     * @param string $web_id The ID of the enumeration set to update. (required)
     * @param \PIWebAPI\Client\Model\EnumerationSet $enumeration_set A partial enumeration set containing the desired changes. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function enumerationSetUpdate($web_id, $enumeration_set)
    {
        list($response) = $this->enumerationSetUpdateWithHttpInfo($web_id, $enumeration_set);
        return $response;
    }

    /**
     * Operation enumerationSetUpdateWithHttpInfo
     *
     * Update an enumeration set by replacing items in its definition.
     *
     * @param string $web_id The ID of the enumeration set to update. (required)
     * @param \PIWebAPI\Client\Model\EnumerationSet $enumeration_set A partial enumeration set containing the desired changes. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function enumerationSetUpdateWithHttpInfo($web_id, $enumeration_set)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling enumerationSetUpdate');
        }
        // verify the required parameter 'enumeration_set' is set
        if ($enumeration_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $enumeration_set when calling enumerationSetUpdate');
        }
        // parse inputs
        $resourcePath = "/enumerationsets/{webId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($enumeration_set)) {
            $_tempBody = $enumeration_set;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/enumerationsets/{webId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation enumerationSetUpdateSecurityEntry
     *
     * Update a security entry owned by the enumeration set.
     *
     * @param string $name The name of the security entry. (required)
     * @param string $web_id The ID of the enumeration set where the security entry will be updated. (required)
     * @param \PIWebAPI\Client\Model\SecurityEntry $security_entry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function enumerationSetUpdateSecurityEntry($name, $web_id, $security_entry, $apply_to_children = null)
    {
        list($response) = $this->enumerationSetUpdateSecurityEntryWithHttpInfo($name, $web_id, $security_entry, $apply_to_children);
        return $response;
    }

    /**
     * Operation enumerationSetUpdateSecurityEntryWithHttpInfo
     *
     * Update a security entry owned by the enumeration set.
     *
     * @param string $name The name of the security entry. (required)
     * @param string $web_id The ID of the enumeration set where the security entry will be updated. (required)
     * @param \PIWebAPI\Client\Model\SecurityEntry $security_entry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function enumerationSetUpdateSecurityEntryWithHttpInfo($name, $web_id, $security_entry, $apply_to_children = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling enumerationSetUpdateSecurityEntry');
        }
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling enumerationSetUpdateSecurityEntry');
        }
        // verify the required parameter 'security_entry' is set
        if ($security_entry === null) {
            throw new \InvalidArgumentException('Missing the required parameter $security_entry when calling enumerationSetUpdateSecurityEntry');
        }
        // parse inputs
        $resourcePath = "/enumerationsets/{webId}/securityentries/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // query params
        if ($apply_to_children !== null) {
            $queryParams['applyToChildren'] = $this->apiClient->getSerializer()->toQueryValue($apply_to_children);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($security_entry)) {
            $_tempBody = $security_entry;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/enumerationsets/{webId}/securityentries/{name}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
