<?php
/**
 * AssetDatabaseApi
 * PHP version 5
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PI Web API 2017 Swagger Spec
 *
 * Swagger Spec file that describes PI Web API
 *
 * OpenAPI spec version: 1.9.0.235
 * Contact: techsupport@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PIWebAPI\Client\Api;

use \PIWebAPI\Client\ApiClient;
use \PIWebAPI\Client\ApiException;
use \PIWebAPI\Client\Configuration;
use \PIWebAPI\Client\ObjectSerializer;

/**
 * AssetDatabaseApi Class Doc Comment
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssetDatabaseApi
{
    /**
     * API Client
     *
     * @var \PIWebAPI\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \PIWebAPI\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\PIWebAPI\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://proghackuc2017.osisoft.com/piwebapi');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \PIWebAPI\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \PIWebAPI\Client\ApiClient $apiClient set the API client
     *
     * @return AssetDatabaseApi
     */
    public function setApiClient(\PIWebAPI\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation assetDatabaseAddReferencedElement
     *
     * Add a reference to an existing element to the specified database.
     *
     * @param string $web_id The ID of the database which the referenced element will be added to. (required)
     * @param string[] $referenced_element_web_id The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @param string $reference_type The name of the reference type between the parent and the referenced element. This must be a \&quot;strong\&quot; reference type. The default is \&quot;parent-child\&quot;. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseAddReferencedElement($web_id, $referenced_element_web_id, $reference_type = null)
    {
        list($response) = $this->assetDatabaseAddReferencedElementWithHttpInfo($web_id, $referenced_element_web_id, $reference_type);
        return $response;
    }

    /**
     * Operation assetDatabaseAddReferencedElementWithHttpInfo
     *
     * Add a reference to an existing element to the specified database.
     *
     * @param string $web_id The ID of the database which the referenced element will be added to. (required)
     * @param string[] $referenced_element_web_id The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @param string $reference_type The name of the reference type between the parent and the referenced element. This must be a \&quot;strong\&quot; reference type. The default is \&quot;parent-child\&quot;. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseAddReferencedElementWithHttpInfo($web_id, $referenced_element_web_id, $reference_type = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseAddReferencedElement');
        }
        // verify the required parameter 'referenced_element_web_id' is set
        if ($referenced_element_web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $referenced_element_web_id when calling assetDatabaseAddReferencedElement');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/referencedelements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // query params
        if (is_array($referenced_element_web_id)) {
            $referenced_element_web_id = $this->apiClient->getSerializer()->serializeCollection($referenced_element_web_id, 'multi', true);
        }
        if ($referenced_element_web_id !== null) {
            $queryParams['referencedElementWebId'] = $this->apiClient->getSerializer()->toQueryValue($referenced_element_web_id);
        }
        // query params
        if ($reference_type !== null) {
            $queryParams['referenceType'] = $this->apiClient->getSerializer()->toQueryValue($reference_type);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/referencedelements'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseCreateAnalysisCategory
     *
     * Create an analysis category at the Asset Database root.
     *
     * @param string $web_id The ID of the database in which to create the analysis category. (required)
     * @param \PIWebAPI\Client\Model\AnalysisCategory $analysis_category The new analysis category definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseCreateAnalysisCategory($web_id, $analysis_category)
    {
        list($response) = $this->assetDatabaseCreateAnalysisCategoryWithHttpInfo($web_id, $analysis_category);
        return $response;
    }

    /**
     * Operation assetDatabaseCreateAnalysisCategoryWithHttpInfo
     *
     * Create an analysis category at the Asset Database root.
     *
     * @param string $web_id The ID of the database in which to create the analysis category. (required)
     * @param \PIWebAPI\Client\Model\AnalysisCategory $analysis_category The new analysis category definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseCreateAnalysisCategoryWithHttpInfo($web_id, $analysis_category)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseCreateAnalysisCategory');
        }
        // verify the required parameter 'analysis_category' is set
        if ($analysis_category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $analysis_category when calling assetDatabaseCreateAnalysisCategory');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/analysiscategories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($analysis_category)) {
            $_tempBody = $analysis_category;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/analysiscategories'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseCreateAnalysisTemplate
     *
     * Create an analysis template at the Asset Database root.
     *
     * @param string $web_id The ID of the database in which to create the analysis template. (required)
     * @param \PIWebAPI\Client\Model\AnalysisTemplate $template The new analysis template definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseCreateAnalysisTemplate($web_id, $template)
    {
        list($response) = $this->assetDatabaseCreateAnalysisTemplateWithHttpInfo($web_id, $template);
        return $response;
    }

    /**
     * Operation assetDatabaseCreateAnalysisTemplateWithHttpInfo
     *
     * Create an analysis template at the Asset Database root.
     *
     * @param string $web_id The ID of the database in which to create the analysis template. (required)
     * @param \PIWebAPI\Client\Model\AnalysisTemplate $template The new analysis template definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseCreateAnalysisTemplateWithHttpInfo($web_id, $template)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseCreateAnalysisTemplate');
        }
        // verify the required parameter 'template' is set
        if ($template === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template when calling assetDatabaseCreateAnalysisTemplate');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/analysistemplates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($template)) {
            $_tempBody = $template;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/analysistemplates'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseCreateAttributeCategory
     *
     * Create an attribute category at the Asset Database root.
     *
     * @param string $web_id The ID of the database in which to create the attribute category. (required)
     * @param \PIWebAPI\Client\Model\AttributeCategory $attribute_category The new attribute category definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseCreateAttributeCategory($web_id, $attribute_category)
    {
        list($response) = $this->assetDatabaseCreateAttributeCategoryWithHttpInfo($web_id, $attribute_category);
        return $response;
    }

    /**
     * Operation assetDatabaseCreateAttributeCategoryWithHttpInfo
     *
     * Create an attribute category at the Asset Database root.
     *
     * @param string $web_id The ID of the database in which to create the attribute category. (required)
     * @param \PIWebAPI\Client\Model\AttributeCategory $attribute_category The new attribute category definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseCreateAttributeCategoryWithHttpInfo($web_id, $attribute_category)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseCreateAttributeCategory');
        }
        // verify the required parameter 'attribute_category' is set
        if ($attribute_category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attribute_category when calling assetDatabaseCreateAttributeCategory');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/attributecategories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($attribute_category)) {
            $_tempBody = $attribute_category;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/attributecategories'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseCreateElement
     *
     * Create a child element.
     *
     * @param string $web_id The ID of the asset database on which to create the element. (required)
     * @param \PIWebAPI\Client\Model\Element $element The new element definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseCreateElement($web_id, $element)
    {
        list($response) = $this->assetDatabaseCreateElementWithHttpInfo($web_id, $element);
        return $response;
    }

    /**
     * Operation assetDatabaseCreateElementWithHttpInfo
     *
     * Create a child element.
     *
     * @param string $web_id The ID of the asset database on which to create the element. (required)
     * @param \PIWebAPI\Client\Model\Element $element The new element definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseCreateElementWithHttpInfo($web_id, $element)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseCreateElement');
        }
        // verify the required parameter 'element' is set
        if ($element === null) {
            throw new \InvalidArgumentException('Missing the required parameter $element when calling assetDatabaseCreateElement');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/elements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($element)) {
            $_tempBody = $element;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/elements'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseCreateElementCategory
     *
     * Create an element category at the Asset Database root.
     *
     * @param string $web_id The ID of the database in which to create the element category. (required)
     * @param \PIWebAPI\Client\Model\ElementCategory $element_category The new element category definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseCreateElementCategory($web_id, $element_category)
    {
        list($response) = $this->assetDatabaseCreateElementCategoryWithHttpInfo($web_id, $element_category);
        return $response;
    }

    /**
     * Operation assetDatabaseCreateElementCategoryWithHttpInfo
     *
     * Create an element category at the Asset Database root.
     *
     * @param string $web_id The ID of the database in which to create the element category. (required)
     * @param \PIWebAPI\Client\Model\ElementCategory $element_category The new element category definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseCreateElementCategoryWithHttpInfo($web_id, $element_category)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseCreateElementCategory');
        }
        // verify the required parameter 'element_category' is set
        if ($element_category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $element_category when calling assetDatabaseCreateElementCategory');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/elementcategories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($element_category)) {
            $_tempBody = $element_category;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/elementcategories'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseCreateElementTemplate
     *
     * Create a template at the Asset Database root. Specify InstanceType of \"Element\" or \"EventFrame\" to create element or event frame template respectively. Only these two types of templates can be created.
     *
     * @param string $web_id The ID of the database in which to create the element template. (required)
     * @param \PIWebAPI\Client\Model\ElementTemplate $template The new element template definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseCreateElementTemplate($web_id, $template)
    {
        list($response) = $this->assetDatabaseCreateElementTemplateWithHttpInfo($web_id, $template);
        return $response;
    }

    /**
     * Operation assetDatabaseCreateElementTemplateWithHttpInfo
     *
     * Create a template at the Asset Database root. Specify InstanceType of \"Element\" or \"EventFrame\" to create element or event frame template respectively. Only these two types of templates can be created.
     *
     * @param string $web_id The ID of the database in which to create the element template. (required)
     * @param \PIWebAPI\Client\Model\ElementTemplate $template The new element template definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseCreateElementTemplateWithHttpInfo($web_id, $template)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseCreateElementTemplate');
        }
        // verify the required parameter 'template' is set
        if ($template === null) {
            throw new \InvalidArgumentException('Missing the required parameter $template when calling assetDatabaseCreateElementTemplate');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/elementtemplates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($template)) {
            $_tempBody = $template;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/elementtemplates'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseCreateEnumerationSet
     *
     * Create an enumeration set at the Asset Database.
     *
     * @param string $web_id The ID of the database in which to create the enumeration set. (required)
     * @param \PIWebAPI\Client\Model\EnumerationSet $enumeration_set The new enumeration set definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseCreateEnumerationSet($web_id, $enumeration_set)
    {
        list($response) = $this->assetDatabaseCreateEnumerationSetWithHttpInfo($web_id, $enumeration_set);
        return $response;
    }

    /**
     * Operation assetDatabaseCreateEnumerationSetWithHttpInfo
     *
     * Create an enumeration set at the Asset Database.
     *
     * @param string $web_id The ID of the database in which to create the enumeration set. (required)
     * @param \PIWebAPI\Client\Model\EnumerationSet $enumeration_set The new enumeration set definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseCreateEnumerationSetWithHttpInfo($web_id, $enumeration_set)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseCreateEnumerationSet');
        }
        // verify the required parameter 'enumeration_set' is set
        if ($enumeration_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $enumeration_set when calling assetDatabaseCreateEnumerationSet');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/enumerationsets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($enumeration_set)) {
            $_tempBody = $enumeration_set;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/enumerationsets'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseCreateEventFrame
     *
     * Create an event frame.
     *
     * @param string $web_id The ID of the database on which to create the event frame. (required)
     * @param \PIWebAPI\Client\Model\EventFrame $event_frame The new event frame definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseCreateEventFrame($web_id, $event_frame)
    {
        list($response) = $this->assetDatabaseCreateEventFrameWithHttpInfo($web_id, $event_frame);
        return $response;
    }

    /**
     * Operation assetDatabaseCreateEventFrameWithHttpInfo
     *
     * Create an event frame.
     *
     * @param string $web_id The ID of the database on which to create the event frame. (required)
     * @param \PIWebAPI\Client\Model\EventFrame $event_frame The new event frame definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseCreateEventFrameWithHttpInfo($web_id, $event_frame)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseCreateEventFrame');
        }
        // verify the required parameter 'event_frame' is set
        if ($event_frame === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_frame when calling assetDatabaseCreateEventFrame');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/eventframes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($event_frame)) {
            $_tempBody = $event_frame;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/eventframes'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseCreateSecurityEntry
     *
     * Create a security entry owned by the asset database.
     *
     * @param string $web_id The ID of the asset database where the security entry will be created. (required)
     * @param \PIWebAPI\Client\Model\SecurityEntry $security_entry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param string $security_item The security item of the desired security entries to be created. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be created. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseCreateSecurityEntry($web_id, $security_entry, $apply_to_children = null, $security_item = null)
    {
        list($response) = $this->assetDatabaseCreateSecurityEntryWithHttpInfo($web_id, $security_entry, $apply_to_children, $security_item);
        return $response;
    }

    /**
     * Operation assetDatabaseCreateSecurityEntryWithHttpInfo
     *
     * Create a security entry owned by the asset database.
     *
     * @param string $web_id The ID of the asset database where the security entry will be created. (required)
     * @param \PIWebAPI\Client\Model\SecurityEntry $security_entry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param string $security_item The security item of the desired security entries to be created. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be created. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseCreateSecurityEntryWithHttpInfo($web_id, $security_entry, $apply_to_children = null, $security_item = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseCreateSecurityEntry');
        }
        // verify the required parameter 'security_entry' is set
        if ($security_entry === null) {
            throw new \InvalidArgumentException('Missing the required parameter $security_entry when calling assetDatabaseCreateSecurityEntry');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/securityentries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // query params
        if ($apply_to_children !== null) {
            $queryParams['applyToChildren'] = $this->apiClient->getSerializer()->toQueryValue($apply_to_children);
        }
        // query params
        if ($security_item !== null) {
            $queryParams['securityItem'] = $this->apiClient->getSerializer()->toQueryValue($security_item);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($security_entry)) {
            $_tempBody = $security_entry;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/securityentries'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseCreateTable
     *
     * Create a table on the Asset Database.
     *
     * @param string $web_id The ID of the database in which to create the table. (required)
     * @param \PIWebAPI\Client\Model\Table $table The new table definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseCreateTable($web_id, $table)
    {
        list($response) = $this->assetDatabaseCreateTableWithHttpInfo($web_id, $table);
        return $response;
    }

    /**
     * Operation assetDatabaseCreateTableWithHttpInfo
     *
     * Create a table on the Asset Database.
     *
     * @param string $web_id The ID of the database in which to create the table. (required)
     * @param \PIWebAPI\Client\Model\Table $table The new table definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseCreateTableWithHttpInfo($web_id, $table)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseCreateTable');
        }
        // verify the required parameter 'table' is set
        if ($table === null) {
            throw new \InvalidArgumentException('Missing the required parameter $table when calling assetDatabaseCreateTable');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/tables";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($table)) {
            $_tempBody = $table;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/tables'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseCreateTableCategory
     *
     * Create a table category on the Asset Database.
     *
     * @param string $web_id The ID of the database in which to create the table category. (required)
     * @param \PIWebAPI\Client\Model\TableCategory $table_category The new table category definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseCreateTableCategory($web_id, $table_category)
    {
        list($response) = $this->assetDatabaseCreateTableCategoryWithHttpInfo($web_id, $table_category);
        return $response;
    }

    /**
     * Operation assetDatabaseCreateTableCategoryWithHttpInfo
     *
     * Create a table category on the Asset Database.
     *
     * @param string $web_id The ID of the database in which to create the table category. (required)
     * @param \PIWebAPI\Client\Model\TableCategory $table_category The new table category definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseCreateTableCategoryWithHttpInfo($web_id, $table_category)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseCreateTableCategory');
        }
        // verify the required parameter 'table_category' is set
        if ($table_category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $table_category when calling assetDatabaseCreateTableCategory');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/tablecategories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($table_category)) {
            $_tempBody = $table_category;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/tablecategories'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseDelete
     *
     * Delete an asset database.
     *
     * @param string $web_id The ID of the database. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseDelete($web_id)
    {
        list($response) = $this->assetDatabaseDeleteWithHttpInfo($web_id);
        return $response;
    }

    /**
     * Operation assetDatabaseDeleteWithHttpInfo
     *
     * Delete an asset database.
     *
     * @param string $web_id The ID of the database. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseDeleteWithHttpInfo($web_id)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseDelete');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseDeleteSecurityEntry
     *
     * Delete a security entry owned by the asset database.
     *
     * @param string $name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param string $web_id The ID of the asset database where the security entry will be deleted. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param string $security_item The security item of the desired security entries to be deleted. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be deleted. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseDeleteSecurityEntry($name, $web_id, $apply_to_children = null, $security_item = null)
    {
        list($response) = $this->assetDatabaseDeleteSecurityEntryWithHttpInfo($name, $web_id, $apply_to_children, $security_item);
        return $response;
    }

    /**
     * Operation assetDatabaseDeleteSecurityEntryWithHttpInfo
     *
     * Delete a security entry owned by the asset database.
     *
     * @param string $name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param string $web_id The ID of the asset database where the security entry will be deleted. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param string $security_item The security item of the desired security entries to be deleted. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be deleted. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseDeleteSecurityEntryWithHttpInfo($name, $web_id, $apply_to_children = null, $security_item = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling assetDatabaseDeleteSecurityEntry');
        }
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseDeleteSecurityEntry');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/securityentries/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apply_to_children !== null) {
            $queryParams['applyToChildren'] = $this->apiClient->getSerializer()->toQueryValue($apply_to_children);
        }
        // query params
        if ($security_item !== null) {
            $queryParams['securityItem'] = $this->apiClient->getSerializer()->toQueryValue($security_item);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/securityentries/{name}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseExport
     *
     * Export the asset database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $end_time The latest ending time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export. The default is &#39;*&#39;. (optional)
     * @param string[] $export_mode Indicates the type of export to perform. The default is &#39;StrongReferences&#39;. Multiple export modes may be specified by using multiple instances of exportMode. (optional)
     * @param string $start_time The earliest starting time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export. The default is &#39;*-30d&#39;. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseExport($web_id, $end_time = null, $export_mode = null, $start_time = null)
    {
        list($response) = $this->assetDatabaseExportWithHttpInfo($web_id, $end_time, $export_mode, $start_time);
        return $response;
    }

    /**
     * Operation assetDatabaseExportWithHttpInfo
     *
     * Export the asset database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $end_time The latest ending time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export. The default is &#39;*&#39;. (optional)
     * @param string[] $export_mode Indicates the type of export to perform. The default is &#39;StrongReferences&#39;. Multiple export modes may be specified by using multiple instances of exportMode. (optional)
     * @param string $start_time The earliest starting time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export. The default is &#39;*-30d&#39;. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseExportWithHttpInfo($web_id, $end_time = null, $export_mode = null, $start_time = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseExport');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/export";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = $this->apiClient->getSerializer()->toQueryValue($end_time);
        }
        // query params
        if (is_array($export_mode)) {
            $export_mode = $this->apiClient->getSerializer()->serializeCollection($export_mode, 'multi', true);
        }
        if ($export_mode !== null) {
            $queryParams['exportMode'] = $this->apiClient->getSerializer()->toQueryValue($export_mode);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = $this->apiClient->getSerializer()->toQueryValue($start_time);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/export'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseFindAnalyses
     *
     * Retrieve analyses based on the specified conditions.
     *
     * @param string $web_id The ID of the database to search for the analyses. (required)
     * @param string[] $field Specifies which of the object&#39;s properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is &#39;Name&#39;. (required)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $query The query string used for finding analyses. The default is null. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsAnalysis
     */
    public function assetDatabaseFindAnalyses($web_id, $field, $max_count = null, $query = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null)
    {
        list($response) = $this->assetDatabaseFindAnalysesWithHttpInfo($web_id, $field, $max_count, $query, $selected_fields, $sort_field, $sort_order, $start_index);
        return $response;
    }

    /**
     * Operation assetDatabaseFindAnalysesWithHttpInfo
     *
     * Retrieve analyses based on the specified conditions.
     *
     * @param string $web_id The ID of the database to search for the analyses. (required)
     * @param string[] $field Specifies which of the object&#39;s properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is &#39;Name&#39;. (required)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $query The query string used for finding analyses. The default is null. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsAnalysis, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseFindAnalysesWithHttpInfo($web_id, $field, $max_count = null, $query = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseFindAnalyses');
        }
        // verify the required parameter 'field' is set
        if ($field === null) {
            throw new \InvalidArgumentException('Missing the required parameter $field when calling assetDatabaseFindAnalyses');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/analyses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($field)) {
            $field = $this->apiClient->getSerializer()->serializeCollection($field, 'multi', true);
        }
        if ($field !== null) {
            $queryParams['field'] = $this->apiClient->getSerializer()->toQueryValue($field);
        }
        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsAnalysis',
                '/assetdatabases/{webId}/analyses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsAnalysis', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsAnalysis', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseFindElementAttributes
     *
     * Retrieves a list of element attributes matching the specified filters from the specified asset database.
     *
     * @param string $web_id The ID of the asset database to use as the root of the search. (required)
     * @param string $attribute_category Specify that returned attributes must have this category. The default is no filter. (optional)
     * @param string $attribute_description_filter The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param string $attribute_name_filter The attribute name filter string used for finding objects. The default is no filter. (optional)
     * @param string $attribute_type Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)
     * @param string $element_category Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)
     * @param string $element_description_filter The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param string $element_name_filter The element name filter string used for finding objects. The default is no filter. (optional)
     * @param string $element_template Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)
     * @param string $element_type Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)
     * @param int $max_count The maximum number of objects to be returned (the page size). The default is 1000. (optional)
     * @param bool $search_full_hierarchy Specifies if the search should include objects nested further than immediate children of the given resource. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsAttribute
     */
    public function assetDatabaseFindElementAttributes($web_id, $attribute_category = null, $attribute_description_filter = null, $attribute_name_filter = null, $attribute_type = null, $element_category = null, $element_description_filter = null, $element_name_filter = null, $element_template = null, $element_type = null, $max_count = null, $search_full_hierarchy = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null)
    {
        list($response) = $this->assetDatabaseFindElementAttributesWithHttpInfo($web_id, $attribute_category, $attribute_description_filter, $attribute_name_filter, $attribute_type, $element_category, $element_description_filter, $element_name_filter, $element_template, $element_type, $max_count, $search_full_hierarchy, $selected_fields, $sort_field, $sort_order, $start_index);
        return $response;
    }

    /**
     * Operation assetDatabaseFindElementAttributesWithHttpInfo
     *
     * Retrieves a list of element attributes matching the specified filters from the specified asset database.
     *
     * @param string $web_id The ID of the asset database to use as the root of the search. (required)
     * @param string $attribute_category Specify that returned attributes must have this category. The default is no filter. (optional)
     * @param string $attribute_description_filter The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param string $attribute_name_filter The attribute name filter string used for finding objects. The default is no filter. (optional)
     * @param string $attribute_type Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)
     * @param string $element_category Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)
     * @param string $element_description_filter The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param string $element_name_filter The element name filter string used for finding objects. The default is no filter. (optional)
     * @param string $element_template Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)
     * @param string $element_type Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)
     * @param int $max_count The maximum number of objects to be returned (the page size). The default is 1000. (optional)
     * @param bool $search_full_hierarchy Specifies if the search should include objects nested further than immediate children of the given resource. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsAttribute, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseFindElementAttributesWithHttpInfo($web_id, $attribute_category = null, $attribute_description_filter = null, $attribute_name_filter = null, $attribute_type = null, $element_category = null, $element_description_filter = null, $element_name_filter = null, $element_template = null, $element_type = null, $max_count = null, $search_full_hierarchy = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseFindElementAttributes');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/elementattributes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($attribute_category !== null) {
            $queryParams['attributeCategory'] = $this->apiClient->getSerializer()->toQueryValue($attribute_category);
        }
        // query params
        if ($attribute_description_filter !== null) {
            $queryParams['attributeDescriptionFilter'] = $this->apiClient->getSerializer()->toQueryValue($attribute_description_filter);
        }
        // query params
        if ($attribute_name_filter !== null) {
            $queryParams['attributeNameFilter'] = $this->apiClient->getSerializer()->toQueryValue($attribute_name_filter);
        }
        // query params
        if ($attribute_type !== null) {
            $queryParams['attributeType'] = $this->apiClient->getSerializer()->toQueryValue($attribute_type);
        }
        // query params
        if ($element_category !== null) {
            $queryParams['elementCategory'] = $this->apiClient->getSerializer()->toQueryValue($element_category);
        }
        // query params
        if ($element_description_filter !== null) {
            $queryParams['elementDescriptionFilter'] = $this->apiClient->getSerializer()->toQueryValue($element_description_filter);
        }
        // query params
        if ($element_name_filter !== null) {
            $queryParams['elementNameFilter'] = $this->apiClient->getSerializer()->toQueryValue($element_name_filter);
        }
        // query params
        if ($element_template !== null) {
            $queryParams['elementTemplate'] = $this->apiClient->getSerializer()->toQueryValue($element_template);
        }
        // query params
        if ($element_type !== null) {
            $queryParams['elementType'] = $this->apiClient->getSerializer()->toQueryValue($element_type);
        }
        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($search_full_hierarchy !== null) {
            $queryParams['searchFullHierarchy'] = $this->apiClient->getSerializer()->toQueryValue($search_full_hierarchy);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsAttribute',
                '/assetdatabases/{webId}/elementattributes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsAttribute', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsAttribute', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseFindEventFrameAttributes
     *
     * Retrieves a list of event frame attributes matching the specified filters from the specified asset database.
     *
     * @param string $web_id The ID of the asset database to use as the root of the search. (required)
     * @param string $attribute_category Specify that returned attributes must have this category. The default is no filter. (optional)
     * @param string $attribute_description_filter The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param string $attribute_name_filter The attribute name filter string used for finding objects. The default is no filter. (optional)
     * @param string $attribute_type Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)
     * @param string $end_time A string representing the latest ending time for the event frames to be matched. The endTime must be greater than or equal to the startTime. The default is &#39;*&#39;. (optional)
     * @param string $event_frame_category Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)
     * @param string $event_frame_description_filter The event frame description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param string $event_frame_name_filter The event frame name filter string used for finding objects. The default is no filter. (optional)
     * @param string $event_frame_template Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)
     * @param int $max_count The maximum number of objects to be returned (the page size). The default is 1000. (optional)
     * @param string $referenced_element_name_filter The name query string which must match the name of a referenced element. The default is no filter. (optional)
     * @param bool $search_full_hierarchy Specifies if the search should include objects nested further than immediate children of the given resource. The default is &#39;false&#39;. (optional)
     * @param string $search_mode Determines how the startTime and endTime parameters are treated when searching for event frames.     The default is &#39;Overlapped&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $start_time A string representing the earliest starting time for the event frames to be matched. startTime must be less than or equal to the endTime. The default is &#39;*-8h&#39;. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsAttribute
     */
    public function assetDatabaseFindEventFrameAttributes($web_id, $attribute_category = null, $attribute_description_filter = null, $attribute_name_filter = null, $attribute_type = null, $end_time = null, $event_frame_category = null, $event_frame_description_filter = null, $event_frame_name_filter = null, $event_frame_template = null, $max_count = null, $referenced_element_name_filter = null, $search_full_hierarchy = null, $search_mode = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null, $start_time = null)
    {
        list($response) = $this->assetDatabaseFindEventFrameAttributesWithHttpInfo($web_id, $attribute_category, $attribute_description_filter, $attribute_name_filter, $attribute_type, $end_time, $event_frame_category, $event_frame_description_filter, $event_frame_name_filter, $event_frame_template, $max_count, $referenced_element_name_filter, $search_full_hierarchy, $search_mode, $selected_fields, $sort_field, $sort_order, $start_index, $start_time);
        return $response;
    }

    /**
     * Operation assetDatabaseFindEventFrameAttributesWithHttpInfo
     *
     * Retrieves a list of event frame attributes matching the specified filters from the specified asset database.
     *
     * @param string $web_id The ID of the asset database to use as the root of the search. (required)
     * @param string $attribute_category Specify that returned attributes must have this category. The default is no filter. (optional)
     * @param string $attribute_description_filter The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param string $attribute_name_filter The attribute name filter string used for finding objects. The default is no filter. (optional)
     * @param string $attribute_type Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)
     * @param string $end_time A string representing the latest ending time for the event frames to be matched. The endTime must be greater than or equal to the startTime. The default is &#39;*&#39;. (optional)
     * @param string $event_frame_category Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)
     * @param string $event_frame_description_filter The event frame description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param string $event_frame_name_filter The event frame name filter string used for finding objects. The default is no filter. (optional)
     * @param string $event_frame_template Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)
     * @param int $max_count The maximum number of objects to be returned (the page size). The default is 1000. (optional)
     * @param string $referenced_element_name_filter The name query string which must match the name of a referenced element. The default is no filter. (optional)
     * @param bool $search_full_hierarchy Specifies if the search should include objects nested further than immediate children of the given resource. The default is &#39;false&#39;. (optional)
     * @param string $search_mode Determines how the startTime and endTime parameters are treated when searching for event frames.     The default is &#39;Overlapped&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $start_time A string representing the earliest starting time for the event frames to be matched. startTime must be less than or equal to the endTime. The default is &#39;*-8h&#39;. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsAttribute, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseFindEventFrameAttributesWithHttpInfo($web_id, $attribute_category = null, $attribute_description_filter = null, $attribute_name_filter = null, $attribute_type = null, $end_time = null, $event_frame_category = null, $event_frame_description_filter = null, $event_frame_name_filter = null, $event_frame_template = null, $max_count = null, $referenced_element_name_filter = null, $search_full_hierarchy = null, $search_mode = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null, $start_time = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseFindEventFrameAttributes');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/eventframeattributes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($attribute_category !== null) {
            $queryParams['attributeCategory'] = $this->apiClient->getSerializer()->toQueryValue($attribute_category);
        }
        // query params
        if ($attribute_description_filter !== null) {
            $queryParams['attributeDescriptionFilter'] = $this->apiClient->getSerializer()->toQueryValue($attribute_description_filter);
        }
        // query params
        if ($attribute_name_filter !== null) {
            $queryParams['attributeNameFilter'] = $this->apiClient->getSerializer()->toQueryValue($attribute_name_filter);
        }
        // query params
        if ($attribute_type !== null) {
            $queryParams['attributeType'] = $this->apiClient->getSerializer()->toQueryValue($attribute_type);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = $this->apiClient->getSerializer()->toQueryValue($end_time);
        }
        // query params
        if ($event_frame_category !== null) {
            $queryParams['eventFrameCategory'] = $this->apiClient->getSerializer()->toQueryValue($event_frame_category);
        }
        // query params
        if ($event_frame_description_filter !== null) {
            $queryParams['eventFrameDescriptionFilter'] = $this->apiClient->getSerializer()->toQueryValue($event_frame_description_filter);
        }
        // query params
        if ($event_frame_name_filter !== null) {
            $queryParams['eventFrameNameFilter'] = $this->apiClient->getSerializer()->toQueryValue($event_frame_name_filter);
        }
        // query params
        if ($event_frame_template !== null) {
            $queryParams['eventFrameTemplate'] = $this->apiClient->getSerializer()->toQueryValue($event_frame_template);
        }
        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($referenced_element_name_filter !== null) {
            $queryParams['referencedElementNameFilter'] = $this->apiClient->getSerializer()->toQueryValue($referenced_element_name_filter);
        }
        // query params
        if ($search_full_hierarchy !== null) {
            $queryParams['searchFullHierarchy'] = $this->apiClient->getSerializer()->toQueryValue($search_full_hierarchy);
        }
        // query params
        if ($search_mode !== null) {
            $queryParams['searchMode'] = $this->apiClient->getSerializer()->toQueryValue($search_mode);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = $this->apiClient->getSerializer()->toQueryValue($start_time);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsAttribute',
                '/assetdatabases/{webId}/eventframeattributes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsAttribute', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsAttribute', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGet
     *
     * Retrieve an Asset Database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\AssetDatabase
     */
    public function assetDatabaseGet($web_id, $selected_fields = null)
    {
        list($response) = $this->assetDatabaseGetWithHttpInfo($web_id, $selected_fields);
        return $response;
    }

    /**
     * Operation assetDatabaseGetWithHttpInfo
     *
     * Retrieve an Asset Database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\AssetDatabase, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetWithHttpInfo($web_id, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGet');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\AssetDatabase',
                '/assetdatabases/{webId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\AssetDatabase', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\AssetDatabase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetAnalysisCategories
     *
     * Retrieve analysis categories for a given Asset Database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsAnalysisCategory
     */
    public function assetDatabaseGetAnalysisCategories($web_id, $selected_fields = null)
    {
        list($response) = $this->assetDatabaseGetAnalysisCategoriesWithHttpInfo($web_id, $selected_fields);
        return $response;
    }

    /**
     * Operation assetDatabaseGetAnalysisCategoriesWithHttpInfo
     *
     * Retrieve analysis categories for a given Asset Database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsAnalysisCategory, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetAnalysisCategoriesWithHttpInfo($web_id, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGetAnalysisCategories');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/analysiscategories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsAnalysisCategory',
                '/assetdatabases/{webId}/analysiscategories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsAnalysisCategory', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsAnalysisCategory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetAnalysisTemplates
     *
     * Retrieve analysis templates based on the specified criteria. By default, all analysis templates in the specified Asset Database are returned.
     *
     * @param string $web_id The ID of the database to search. (required)
     * @param string[] $field Specifies which of the object&#39;s properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is &#39;Name&#39;. (required)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $query The query string used for finding objects. The default is no query string. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsAnalysisTemplate
     */
    public function assetDatabaseGetAnalysisTemplates($web_id, $field, $max_count = null, $query = null, $selected_fields = null, $sort_field = null, $sort_order = null)
    {
        list($response) = $this->assetDatabaseGetAnalysisTemplatesWithHttpInfo($web_id, $field, $max_count, $query, $selected_fields, $sort_field, $sort_order);
        return $response;
    }

    /**
     * Operation assetDatabaseGetAnalysisTemplatesWithHttpInfo
     *
     * Retrieve analysis templates based on the specified criteria. By default, all analysis templates in the specified Asset Database are returned.
     *
     * @param string $web_id The ID of the database to search. (required)
     * @param string[] $field Specifies which of the object&#39;s properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is &#39;Name&#39;. (required)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $query The query string used for finding objects. The default is no query string. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsAnalysisTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetAnalysisTemplatesWithHttpInfo($web_id, $field, $max_count = null, $query = null, $selected_fields = null, $sort_field = null, $sort_order = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGetAnalysisTemplates');
        }
        // verify the required parameter 'field' is set
        if ($field === null) {
            throw new \InvalidArgumentException('Missing the required parameter $field when calling assetDatabaseGetAnalysisTemplates');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/analysistemplates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($field)) {
            $field = $this->apiClient->getSerializer()->serializeCollection($field, 'multi', true);
        }
        if ($field !== null) {
            $queryParams['field'] = $this->apiClient->getSerializer()->toQueryValue($field);
        }
        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsAnalysisTemplate',
                '/assetdatabases/{webId}/analysistemplates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsAnalysisTemplate', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsAnalysisTemplate', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetAttributeCategories
     *
     * Retrieve attribute categories for a given Asset Database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsAttributeCategory
     */
    public function assetDatabaseGetAttributeCategories($web_id, $selected_fields = null)
    {
        list($response) = $this->assetDatabaseGetAttributeCategoriesWithHttpInfo($web_id, $selected_fields);
        return $response;
    }

    /**
     * Operation assetDatabaseGetAttributeCategoriesWithHttpInfo
     *
     * Retrieve attribute categories for a given Asset Database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsAttributeCategory, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetAttributeCategoriesWithHttpInfo($web_id, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGetAttributeCategories');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/attributecategories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsAttributeCategory',
                '/assetdatabases/{webId}/attributecategories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsAttributeCategory', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsAttributeCategory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetByPath
     *
     * Retrieve an Asset Database by path.
     *
     * @param string $path The path to the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\AssetDatabase
     */
    public function assetDatabaseGetByPath($path, $selected_fields = null)
    {
        list($response) = $this->assetDatabaseGetByPathWithHttpInfo($path, $selected_fields);
        return $response;
    }

    /**
     * Operation assetDatabaseGetByPathWithHttpInfo
     *
     * Retrieve an Asset Database by path.
     *
     * @param string $path The path to the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\AssetDatabase, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetByPathWithHttpInfo($path, $selected_fields = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling assetDatabaseGetByPath');
        }
        // parse inputs
        $resourcePath = "/assetdatabases";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\AssetDatabase',
                '/assetdatabases'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\AssetDatabase', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\AssetDatabase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetElementCategories
     *
     * Retrieve element categories for a given Asset Database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsElementCategory
     */
    public function assetDatabaseGetElementCategories($web_id, $selected_fields = null)
    {
        list($response) = $this->assetDatabaseGetElementCategoriesWithHttpInfo($web_id, $selected_fields);
        return $response;
    }

    /**
     * Operation assetDatabaseGetElementCategoriesWithHttpInfo
     *
     * Retrieve element categories for a given Asset Database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsElementCategory, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetElementCategoriesWithHttpInfo($web_id, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGetElementCategories');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/elementcategories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsElementCategory',
                '/assetdatabases/{webId}/elementcategories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsElementCategory', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsElementCategory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetElementTemplates
     *
     * Retrieve element templates based on the specified criteria. Only templates of instance type \"Element\" and \"EventFrame\" are returned. By default, all element and event frame templates in the specified Asset Database are returned.
     *
     * @param string $web_id The ID of the database to search. (required)
     * @param string[] $field Specifies which of the object&#39;s properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is &#39;Name&#39;. (required)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $query The query string used for finding objects. The default is no query string. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsElementTemplate
     */
    public function assetDatabaseGetElementTemplates($web_id, $field, $max_count = null, $query = null, $selected_fields = null, $sort_field = null, $sort_order = null)
    {
        list($response) = $this->assetDatabaseGetElementTemplatesWithHttpInfo($web_id, $field, $max_count, $query, $selected_fields, $sort_field, $sort_order);
        return $response;
    }

    /**
     * Operation assetDatabaseGetElementTemplatesWithHttpInfo
     *
     * Retrieve element templates based on the specified criteria. Only templates of instance type \"Element\" and \"EventFrame\" are returned. By default, all element and event frame templates in the specified Asset Database are returned.
     *
     * @param string $web_id The ID of the database to search. (required)
     * @param string[] $field Specifies which of the object&#39;s properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is &#39;Name&#39;. (required)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $query The query string used for finding objects. The default is no query string. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsElementTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetElementTemplatesWithHttpInfo($web_id, $field, $max_count = null, $query = null, $selected_fields = null, $sort_field = null, $sort_order = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGetElementTemplates');
        }
        // verify the required parameter 'field' is set
        if ($field === null) {
            throw new \InvalidArgumentException('Missing the required parameter $field when calling assetDatabaseGetElementTemplates');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/elementtemplates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($field)) {
            $field = $this->apiClient->getSerializer()->serializeCollection($field, 'multi', true);
        }
        if ($field !== null) {
            $queryParams['field'] = $this->apiClient->getSerializer()->toQueryValue($field);
        }
        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsElementTemplate',
                '/assetdatabases/{webId}/elementtemplates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsElementTemplate', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsElementTemplate', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetElements
     *
     * Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified asset database.
     *
     * @param string $web_id The ID of the database to use as the root of the search. (required)
     * @param string $category_name Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param string $description_filter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param string $element_type Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding objects. The default is no filter. (optional)
     * @param bool $search_full_hierarchy Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $template_name Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsElement
     */
    public function assetDatabaseGetElements($web_id, $category_name = null, $description_filter = null, $element_type = null, $max_count = null, $name_filter = null, $search_full_hierarchy = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null, $template_name = null)
    {
        list($response) = $this->assetDatabaseGetElementsWithHttpInfo($web_id, $category_name, $description_filter, $element_type, $max_count, $name_filter, $search_full_hierarchy, $selected_fields, $sort_field, $sort_order, $start_index, $template_name);
        return $response;
    }

    /**
     * Operation assetDatabaseGetElementsWithHttpInfo
     *
     * Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified asset database.
     *
     * @param string $web_id The ID of the database to use as the root of the search. (required)
     * @param string $category_name Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param string $description_filter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param string $element_type Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding objects. The default is no filter. (optional)
     * @param bool $search_full_hierarchy Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $template_name Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsElement, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetElementsWithHttpInfo($web_id, $category_name = null, $description_filter = null, $element_type = null, $max_count = null, $name_filter = null, $search_full_hierarchy = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null, $template_name = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGetElements');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/elements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($category_name !== null) {
            $queryParams['categoryName'] = $this->apiClient->getSerializer()->toQueryValue($category_name);
        }
        // query params
        if ($description_filter !== null) {
            $queryParams['descriptionFilter'] = $this->apiClient->getSerializer()->toQueryValue($description_filter);
        }
        // query params
        if ($element_type !== null) {
            $queryParams['elementType'] = $this->apiClient->getSerializer()->toQueryValue($element_type);
        }
        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($name_filter !== null) {
            $queryParams['nameFilter'] = $this->apiClient->getSerializer()->toQueryValue($name_filter);
        }
        // query params
        if ($search_full_hierarchy !== null) {
            $queryParams['searchFullHierarchy'] = $this->apiClient->getSerializer()->toQueryValue($search_full_hierarchy);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($template_name !== null) {
            $queryParams['templateName'] = $this->apiClient->getSerializer()->toQueryValue($template_name);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsElement',
                '/assetdatabases/{webId}/elements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsElement', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsElement', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetEnumerationSets
     *
     * Retrieve enumeration sets for given asset database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsEnumerationSet
     */
    public function assetDatabaseGetEnumerationSets($web_id, $selected_fields = null)
    {
        list($response) = $this->assetDatabaseGetEnumerationSetsWithHttpInfo($web_id, $selected_fields);
        return $response;
    }

    /**
     * Operation assetDatabaseGetEnumerationSetsWithHttpInfo
     *
     * Retrieve enumeration sets for given asset database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsEnumerationSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetEnumerationSetsWithHttpInfo($web_id, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGetEnumerationSets');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/enumerationsets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsEnumerationSet',
                '/assetdatabases/{webId}/enumerationsets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsEnumerationSet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsEnumerationSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetEventFrames
     *
     * Retrieve event frames based on the specified conditions. By default, returns all children of the specified root resource with a start time in the past 8 hours.
     *
     * @param string $web_id The ID of the asset database to use as the root of the search. (required)
     * @param bool $can_be_acknowledged Specify the returned event frames&#39; canBeAcknowledged property. The default is no canBeAcknowledged filter. (optional)
     * @param string $category_name Specify that returned event frames must have this category. The default is no category filter. (optional)
     * @param string $end_time The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param bool $is_acknowledged Specify the returned event frames&#39; isAcknowledged property. The default no isAcknowledged filter. (optional)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding event frames. The default is no filter. (optional)
     * @param string $referenced_element_name_filter The name query string which must match the name of a referenced element. The default is no filter. (optional)
     * @param string $referenced_element_template_name Specify that returned event frames must have an element in the event frame&#39;s referenced elements collection that derives from the template. Specify this parameter by name. (optional)
     * @param bool $search_full_hierarchy Specifies whether the search should include objects nested further than the immediate children of the search root. The default is &#39;false&#39;. (optional)
     * @param string $search_mode Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of endTime, sortField, or sortOrder may be specified. The default is &#39;Overlapped&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string[] $severity Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $start_time The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*-8h&#39;. (optional)
     * @param string $template_name Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsEventFrame
     */
    public function assetDatabaseGetEventFrames($web_id, $can_be_acknowledged = null, $category_name = null, $end_time = null, $is_acknowledged = null, $max_count = null, $name_filter = null, $referenced_element_name_filter = null, $referenced_element_template_name = null, $search_full_hierarchy = null, $search_mode = null, $selected_fields = null, $severity = null, $sort_field = null, $sort_order = null, $start_index = null, $start_time = null, $template_name = null)
    {
        list($response) = $this->assetDatabaseGetEventFramesWithHttpInfo($web_id, $can_be_acknowledged, $category_name, $end_time, $is_acknowledged, $max_count, $name_filter, $referenced_element_name_filter, $referenced_element_template_name, $search_full_hierarchy, $search_mode, $selected_fields, $severity, $sort_field, $sort_order, $start_index, $start_time, $template_name);
        return $response;
    }

    /**
     * Operation assetDatabaseGetEventFramesWithHttpInfo
     *
     * Retrieve event frames based on the specified conditions. By default, returns all children of the specified root resource with a start time in the past 8 hours.
     *
     * @param string $web_id The ID of the asset database to use as the root of the search. (required)
     * @param bool $can_be_acknowledged Specify the returned event frames&#39; canBeAcknowledged property. The default is no canBeAcknowledged filter. (optional)
     * @param string $category_name Specify that returned event frames must have this category. The default is no category filter. (optional)
     * @param string $end_time The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param bool $is_acknowledged Specify the returned event frames&#39; isAcknowledged property. The default no isAcknowledged filter. (optional)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding event frames. The default is no filter. (optional)
     * @param string $referenced_element_name_filter The name query string which must match the name of a referenced element. The default is no filter. (optional)
     * @param string $referenced_element_template_name Specify that returned event frames must have an element in the event frame&#39;s referenced elements collection that derives from the template. Specify this parameter by name. (optional)
     * @param bool $search_full_hierarchy Specifies whether the search should include objects nested further than the immediate children of the search root. The default is &#39;false&#39;. (optional)
     * @param string $search_mode Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of endTime, sortField, or sortOrder may be specified. The default is &#39;Overlapped&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string[] $severity Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $start_time The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*-8h&#39;. (optional)
     * @param string $template_name Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsEventFrame, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetEventFramesWithHttpInfo($web_id, $can_be_acknowledged = null, $category_name = null, $end_time = null, $is_acknowledged = null, $max_count = null, $name_filter = null, $referenced_element_name_filter = null, $referenced_element_template_name = null, $search_full_hierarchy = null, $search_mode = null, $selected_fields = null, $severity = null, $sort_field = null, $sort_order = null, $start_index = null, $start_time = null, $template_name = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGetEventFrames');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/eventframes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($can_be_acknowledged !== null) {
            $queryParams['canBeAcknowledged'] = $this->apiClient->getSerializer()->toQueryValue($can_be_acknowledged);
        }
        // query params
        if ($category_name !== null) {
            $queryParams['categoryName'] = $this->apiClient->getSerializer()->toQueryValue($category_name);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = $this->apiClient->getSerializer()->toQueryValue($end_time);
        }
        // query params
        if ($is_acknowledged !== null) {
            $queryParams['isAcknowledged'] = $this->apiClient->getSerializer()->toQueryValue($is_acknowledged);
        }
        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($name_filter !== null) {
            $queryParams['nameFilter'] = $this->apiClient->getSerializer()->toQueryValue($name_filter);
        }
        // query params
        if ($referenced_element_name_filter !== null) {
            $queryParams['referencedElementNameFilter'] = $this->apiClient->getSerializer()->toQueryValue($referenced_element_name_filter);
        }
        // query params
        if ($referenced_element_template_name !== null) {
            $queryParams['referencedElementTemplateName'] = $this->apiClient->getSerializer()->toQueryValue($referenced_element_template_name);
        }
        // query params
        if ($search_full_hierarchy !== null) {
            $queryParams['searchFullHierarchy'] = $this->apiClient->getSerializer()->toQueryValue($search_full_hierarchy);
        }
        // query params
        if ($search_mode !== null) {
            $queryParams['searchMode'] = $this->apiClient->getSerializer()->toQueryValue($search_mode);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if (is_array($severity)) {
            $severity = $this->apiClient->getSerializer()->serializeCollection($severity, 'multi', true);
        }
        if ($severity !== null) {
            $queryParams['severity'] = $this->apiClient->getSerializer()->toQueryValue($severity);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = $this->apiClient->getSerializer()->toQueryValue($start_time);
        }
        // query params
        if ($template_name !== null) {
            $queryParams['templateName'] = $this->apiClient->getSerializer()->toQueryValue($template_name);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsEventFrame',
                '/assetdatabases/{webId}/eventframes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsEventFrame', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsEventFrame', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetReferencedElements
     *
     * Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements at the root level of the asset database.
     *
     * @param string $web_id The ID of the resource to use as the root of the search. (required)
     * @param string $category_name Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param string $description_filter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param string $element_type Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding objects. The default is no filter. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $template_name Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsElement
     */
    public function assetDatabaseGetReferencedElements($web_id, $category_name = null, $description_filter = null, $element_type = null, $max_count = null, $name_filter = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null, $template_name = null)
    {
        list($response) = $this->assetDatabaseGetReferencedElementsWithHttpInfo($web_id, $category_name, $description_filter, $element_type, $max_count, $name_filter, $selected_fields, $sort_field, $sort_order, $start_index, $template_name);
        return $response;
    }

    /**
     * Operation assetDatabaseGetReferencedElementsWithHttpInfo
     *
     * Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements at the root level of the asset database.
     *
     * @param string $web_id The ID of the resource to use as the root of the search. (required)
     * @param string $category_name Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param string $description_filter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param string $element_type Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding objects. The default is no filter. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $template_name Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsElement, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetReferencedElementsWithHttpInfo($web_id, $category_name = null, $description_filter = null, $element_type = null, $max_count = null, $name_filter = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null, $template_name = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGetReferencedElements');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/referencedelements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($category_name !== null) {
            $queryParams['categoryName'] = $this->apiClient->getSerializer()->toQueryValue($category_name);
        }
        // query params
        if ($description_filter !== null) {
            $queryParams['descriptionFilter'] = $this->apiClient->getSerializer()->toQueryValue($description_filter);
        }
        // query params
        if ($element_type !== null) {
            $queryParams['elementType'] = $this->apiClient->getSerializer()->toQueryValue($element_type);
        }
        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($name_filter !== null) {
            $queryParams['nameFilter'] = $this->apiClient->getSerializer()->toQueryValue($name_filter);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($template_name !== null) {
            $queryParams['templateName'] = $this->apiClient->getSerializer()->toQueryValue($template_name);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsElement',
                '/assetdatabases/{webId}/referencedelements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsElement', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsElement', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetSecurity
     *
     * Get the security information of the specified security item associated with the asset database for a specified user.
     *
     * @param string $web_id The ID of the asset database for the security to be checked. (required)
     * @param string[] $security_item The security item of the desired security information to be returned. Multiple security items may be specified with multiple instances of the parameter. If the parameter is not specified, only &#39;Default&#39; security item of the security information will be returned. (required)
     * @param string[] $user_identity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param bool $force_refresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsSecurityRights
     */
    public function assetDatabaseGetSecurity($web_id, $security_item, $user_identity, $force_refresh = null, $selected_fields = null)
    {
        list($response) = $this->assetDatabaseGetSecurityWithHttpInfo($web_id, $security_item, $user_identity, $force_refresh, $selected_fields);
        return $response;
    }

    /**
     * Operation assetDatabaseGetSecurityWithHttpInfo
     *
     * Get the security information of the specified security item associated with the asset database for a specified user.
     *
     * @param string $web_id The ID of the asset database for the security to be checked. (required)
     * @param string[] $security_item The security item of the desired security information to be returned. Multiple security items may be specified with multiple instances of the parameter. If the parameter is not specified, only &#39;Default&#39; security item of the security information will be returned. (required)
     * @param string[] $user_identity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param bool $force_refresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsSecurityRights, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetSecurityWithHttpInfo($web_id, $security_item, $user_identity, $force_refresh = null, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGetSecurity');
        }
        // verify the required parameter 'security_item' is set
        if ($security_item === null) {
            throw new \InvalidArgumentException('Missing the required parameter $security_item when calling assetDatabaseGetSecurity');
        }
        // verify the required parameter 'user_identity' is set
        if ($user_identity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_identity when calling assetDatabaseGetSecurity');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/security";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($security_item)) {
            $security_item = $this->apiClient->getSerializer()->serializeCollection($security_item, 'multi', true);
        }
        if ($security_item !== null) {
            $queryParams['securityItem'] = $this->apiClient->getSerializer()->toQueryValue($security_item);
        }
        // query params
        if (is_array($user_identity)) {
            $user_identity = $this->apiClient->getSerializer()->serializeCollection($user_identity, 'multi', true);
        }
        if ($user_identity !== null) {
            $queryParams['userIdentity'] = $this->apiClient->getSerializer()->toQueryValue($user_identity);
        }
        // query params
        if ($force_refresh !== null) {
            $queryParams['forceRefresh'] = $this->apiClient->getSerializer()->toQueryValue($force_refresh);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsSecurityRights',
                '/assetdatabases/{webId}/security'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsSecurityRights', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsSecurityRights', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetSecurityEntries
     *
     * Retrieve the security entries of the specified security item associated with the asset database based on the specified criteria. By default, all security entries for this asset database are returned.
     *
     * @param string $web_id The ID of the asset database. (required)
     * @param string $name_filter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param string $security_item The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be returned. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsSecurityEntry
     */
    public function assetDatabaseGetSecurityEntries($web_id, $name_filter = null, $security_item = null, $selected_fields = null)
    {
        list($response) = $this->assetDatabaseGetSecurityEntriesWithHttpInfo($web_id, $name_filter, $security_item, $selected_fields);
        return $response;
    }

    /**
     * Operation assetDatabaseGetSecurityEntriesWithHttpInfo
     *
     * Retrieve the security entries of the specified security item associated with the asset database based on the specified criteria. By default, all security entries for this asset database are returned.
     *
     * @param string $web_id The ID of the asset database. (required)
     * @param string $name_filter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param string $security_item The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be returned. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsSecurityEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetSecurityEntriesWithHttpInfo($web_id, $name_filter = null, $security_item = null, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGetSecurityEntries');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/securityentries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($name_filter !== null) {
            $queryParams['nameFilter'] = $this->apiClient->getSerializer()->toQueryValue($name_filter);
        }
        // query params
        if ($security_item !== null) {
            $queryParams['securityItem'] = $this->apiClient->getSerializer()->toQueryValue($security_item);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsSecurityEntry',
                '/assetdatabases/{webId}/securityentries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsSecurityEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsSecurityEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetSecurityEntryByName
     *
     * Retrieve the security entry of the specified security item associated with the asset database with the specified name.
     *
     * @param string $name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param string $web_id The ID of the asset database. (required)
     * @param string $security_item The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be returned. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\SecurityEntry
     */
    public function assetDatabaseGetSecurityEntryByName($name, $web_id, $security_item = null, $selected_fields = null)
    {
        list($response) = $this->assetDatabaseGetSecurityEntryByNameWithHttpInfo($name, $web_id, $security_item, $selected_fields);
        return $response;
    }

    /**
     * Operation assetDatabaseGetSecurityEntryByNameWithHttpInfo
     *
     * Retrieve the security entry of the specified security item associated with the asset database with the specified name.
     *
     * @param string $name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param string $web_id The ID of the asset database. (required)
     * @param string $security_item The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be returned. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\SecurityEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetSecurityEntryByNameWithHttpInfo($name, $web_id, $security_item = null, $selected_fields = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling assetDatabaseGetSecurityEntryByName');
        }
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGetSecurityEntryByName');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/securityentries/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($security_item !== null) {
            $queryParams['securityItem'] = $this->apiClient->getSerializer()->toQueryValue($security_item);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\SecurityEntry',
                '/assetdatabases/{webId}/securityentries/{name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\SecurityEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\SecurityEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetTableCategories
     *
     * Retrieve table categories for a given Asset Database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsTableCategory
     */
    public function assetDatabaseGetTableCategories($web_id, $selected_fields = null)
    {
        list($response) = $this->assetDatabaseGetTableCategoriesWithHttpInfo($web_id, $selected_fields);
        return $response;
    }

    /**
     * Operation assetDatabaseGetTableCategoriesWithHttpInfo
     *
     * Retrieve table categories for a given Asset Database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsTableCategory, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetTableCategoriesWithHttpInfo($web_id, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGetTableCategories');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/tablecategories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsTableCategory',
                '/assetdatabases/{webId}/tablecategories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsTableCategory', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsTableCategory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseGetTables
     *
     * Retrieve tables for given Asset Database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsTable
     */
    public function assetDatabaseGetTables($web_id, $selected_fields = null)
    {
        list($response) = $this->assetDatabaseGetTablesWithHttpInfo($web_id, $selected_fields);
        return $response;
    }

    /**
     * Operation assetDatabaseGetTablesWithHttpInfo
     *
     * Retrieve tables for given Asset Database.
     *
     * @param string $web_id The ID of the database. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsTable, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseGetTablesWithHttpInfo($web_id, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseGetTables');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/tables";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsTable',
                '/assetdatabases/{webId}/tables'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsTable', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsTable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseImport
     *
     * Import an asset database.
     *
     * @param string $web_id The ID of the asset database. (required)
     * @param string[] $import_mode Indicates the type of import to perform. The default is &#39;AllowCreate | AllowUpdate | AutoCheckIn&#39;. Multiple import modes may be specified by using multiple instances of importMode. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseImport($web_id, $import_mode = null)
    {
        list($response) = $this->assetDatabaseImportWithHttpInfo($web_id, $import_mode);
        return $response;
    }

    /**
     * Operation assetDatabaseImportWithHttpInfo
     *
     * Import an asset database.
     *
     * @param string $web_id The ID of the asset database. (required)
     * @param string[] $import_mode Indicates the type of import to perform. The default is &#39;AllowCreate | AllowUpdate | AutoCheckIn&#39;. Multiple import modes may be specified by using multiple instances of importMode. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseImportWithHttpInfo($web_id, $import_mode = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseImport');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/import";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // query params
        if (is_array($import_mode)) {
            $import_mode = $this->apiClient->getSerializer()->serializeCollection($import_mode, 'multi', true);
        }
        if ($import_mode !== null) {
            $queryParams['importMode'] = $this->apiClient->getSerializer()->toQueryValue($import_mode);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/import'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseRemoveReferencedElement
     *
     * Remove a reference to an existing element from the specified database.
     *
     * @param string $web_id The ID of the database which the referenced element will be removed from. (required)
     * @param string[] $referenced_element_web_id The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseRemoveReferencedElement($web_id, $referenced_element_web_id)
    {
        list($response) = $this->assetDatabaseRemoveReferencedElementWithHttpInfo($web_id, $referenced_element_web_id);
        return $response;
    }

    /**
     * Operation assetDatabaseRemoveReferencedElementWithHttpInfo
     *
     * Remove a reference to an existing element from the specified database.
     *
     * @param string $web_id The ID of the database which the referenced element will be removed from. (required)
     * @param string[] $referenced_element_web_id The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseRemoveReferencedElementWithHttpInfo($web_id, $referenced_element_web_id)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseRemoveReferencedElement');
        }
        // verify the required parameter 'referenced_element_web_id' is set
        if ($referenced_element_web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $referenced_element_web_id when calling assetDatabaseRemoveReferencedElement');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/referencedelements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($referenced_element_web_id)) {
            $referenced_element_web_id = $this->apiClient->getSerializer()->serializeCollection($referenced_element_web_id, 'multi', true);
        }
        if ($referenced_element_web_id !== null) {
            $queryParams['referencedElementWebId'] = $this->apiClient->getSerializer()->toQueryValue($referenced_element_web_id);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/referencedelements'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseUpdate
     *
     * Update an asset database by replacing items in its definition.
     *
     * @param string $web_id The ID of the database. (required)
     * @param \PIWebAPI\Client\Model\AssetDatabase $database A partial database containing the desired changes. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseUpdate($web_id, $database)
    {
        list($response) = $this->assetDatabaseUpdateWithHttpInfo($web_id, $database);
        return $response;
    }

    /**
     * Operation assetDatabaseUpdateWithHttpInfo
     *
     * Update an asset database by replacing items in its definition.
     *
     * @param string $web_id The ID of the database. (required)
     * @param \PIWebAPI\Client\Model\AssetDatabase $database A partial database containing the desired changes. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseUpdateWithHttpInfo($web_id, $database)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseUpdate');
        }
        // verify the required parameter 'database' is set
        if ($database === null) {
            throw new \InvalidArgumentException('Missing the required parameter $database when calling assetDatabaseUpdate');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($database)) {
            $_tempBody = $database;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation assetDatabaseUpdateSecurityEntry
     *
     * Update a security entry owned by the asset database.
     *
     * @param string $name The name of the security entry. (required)
     * @param string $web_id The ID of the asset database where the security entry will be updated. (required)
     * @param \PIWebAPI\Client\Model\SecurityEntry $security_entry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param string $security_item The security item of the desired security entries to be updated. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be updated. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function assetDatabaseUpdateSecurityEntry($name, $web_id, $security_entry, $apply_to_children = null, $security_item = null)
    {
        list($response) = $this->assetDatabaseUpdateSecurityEntryWithHttpInfo($name, $web_id, $security_entry, $apply_to_children, $security_item);
        return $response;
    }

    /**
     * Operation assetDatabaseUpdateSecurityEntryWithHttpInfo
     *
     * Update a security entry owned by the asset database.
     *
     * @param string $name The name of the security entry. (required)
     * @param string $web_id The ID of the asset database where the security entry will be updated. (required)
     * @param \PIWebAPI\Client\Model\SecurityEntry $security_entry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param string $security_item The security item of the desired security entries to be updated. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be updated. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetDatabaseUpdateSecurityEntryWithHttpInfo($name, $web_id, $security_entry, $apply_to_children = null, $security_item = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling assetDatabaseUpdateSecurityEntry');
        }
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling assetDatabaseUpdateSecurityEntry');
        }
        // verify the required parameter 'security_entry' is set
        if ($security_entry === null) {
            throw new \InvalidArgumentException('Missing the required parameter $security_entry when calling assetDatabaseUpdateSecurityEntry');
        }
        // parse inputs
        $resourcePath = "/assetdatabases/{webId}/securityentries/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // query params
        if ($apply_to_children !== null) {
            $queryParams['applyToChildren'] = $this->apiClient->getSerializer()->toQueryValue($apply_to_children);
        }
        // query params
        if ($security_item !== null) {
            $queryParams['securityItem'] = $this->apiClient->getSerializer()->toQueryValue($security_item);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($security_entry)) {
            $_tempBody = $security_entry;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/assetdatabases/{webId}/securityentries/{name}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
