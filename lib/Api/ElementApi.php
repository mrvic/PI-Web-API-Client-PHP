<?php
/**
 * ElementApi
 * PHP version 5
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PI Web API 2017 Swagger Spec
 *
 * Swagger Spec file that describes PI Web API
 *
 * OpenAPI spec version: 1.9.0.235
 * Contact: techsupport@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PIWebAPI\Client\Api;

use \PIWebAPI\Client\ApiClient;
use \PIWebAPI\Client\ApiException;
use \PIWebAPI\Client\Configuration;
use \PIWebAPI\Client\ObjectSerializer;

/**
 * ElementApi Class Doc Comment
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ElementApi
{
    /**
     * API Client
     *
     * @var \PIWebAPI\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \PIWebAPI\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\PIWebAPI\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://proghackuc2017.osisoft.com/piwebapi');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \PIWebAPI\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \PIWebAPI\Client\ApiClient $apiClient set the API client
     *
     * @return ElementApi
     */
    public function setApiClient(\PIWebAPI\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation elementAddReferencedElement
     *
     * Add a reference to an existing element to the child elements collection.
     *
     * @param string $web_id The ID of the element which the referenced element will be added to. (required)
     * @param string[] $referenced_element_web_id The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @param string $reference_type The name of the reference type between the parent and the referenced element. The default is \&quot;parent-child\&quot;. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function elementAddReferencedElement($web_id, $referenced_element_web_id, $reference_type = null)
    {
        list($response) = $this->elementAddReferencedElementWithHttpInfo($web_id, $referenced_element_web_id, $reference_type);
        return $response;
    }

    /**
     * Operation elementAddReferencedElementWithHttpInfo
     *
     * Add a reference to an existing element to the child elements collection.
     *
     * @param string $web_id The ID of the element which the referenced element will be added to. (required)
     * @param string[] $referenced_element_web_id The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @param string $reference_type The name of the reference type between the parent and the referenced element. The default is \&quot;parent-child\&quot;. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementAddReferencedElementWithHttpInfo($web_id, $referenced_element_web_id, $reference_type = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementAddReferencedElement');
        }
        // verify the required parameter 'referenced_element_web_id' is set
        if ($referenced_element_web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $referenced_element_web_id when calling elementAddReferencedElement');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/referencedelements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // query params
        if (is_array($referenced_element_web_id)) {
            $referenced_element_web_id = $this->apiClient->getSerializer()->serializeCollection($referenced_element_web_id, 'multi', true);
        }
        if ($referenced_element_web_id !== null) {
            $queryParams['referencedElementWebId'] = $this->apiClient->getSerializer()->toQueryValue($referenced_element_web_id);
        }
        // query params
        if ($reference_type !== null) {
            $queryParams['referenceType'] = $this->apiClient->getSerializer()->toQueryValue($reference_type);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/elements/{webId}/referencedelements'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementCreateAnalysis
     *
     * Create an Analysis.
     *
     * @param string $web_id The ID of the element on which to create the Analysis. (required)
     * @param \PIWebAPI\Client\Model\Analysis $analysis The new Analysis definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function elementCreateAnalysis($web_id, $analysis)
    {
        list($response) = $this->elementCreateAnalysisWithHttpInfo($web_id, $analysis);
        return $response;
    }

    /**
     * Operation elementCreateAnalysisWithHttpInfo
     *
     * Create an Analysis.
     *
     * @param string $web_id The ID of the element on which to create the Analysis. (required)
     * @param \PIWebAPI\Client\Model\Analysis $analysis The new Analysis definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementCreateAnalysisWithHttpInfo($web_id, $analysis)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementCreateAnalysis');
        }
        // verify the required parameter 'analysis' is set
        if ($analysis === null) {
            throw new \InvalidArgumentException('Missing the required parameter $analysis when calling elementCreateAnalysis');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/analyses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($analysis)) {
            $_tempBody = $analysis;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/elements/{webId}/analyses'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation elementCreateAttribute
     *
     * Create a new attribute of the specified element.
     *
     * @param string $web_id The ID of the element on which to create the attribute. (required)
     * @param \PIWebAPI\Client\Model\Attribute $attribute The definition of the new attribute. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function elementCreateAttribute($web_id, $attribute)
    {
        list($response) = $this->elementCreateAttributeWithHttpInfo($web_id, $attribute);
        return $response;
    }

    /**
     * Operation elementCreateAttributeWithHttpInfo
     *
     * Create a new attribute of the specified element.
     *
     * @param string $web_id The ID of the element on which to create the attribute. (required)
     * @param \PIWebAPI\Client\Model\Attribute $attribute The definition of the new attribute. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementCreateAttributeWithHttpInfo($web_id, $attribute)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementCreateAttribute');
        }
        // verify the required parameter 'attribute' is set
        if ($attribute === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attribute when calling elementCreateAttribute');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/attributes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($attribute)) {
            $_tempBody = $attribute;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/elements/{webId}/attributes'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation elementCreateConfig
     *
     * Executes the create configuration function of the data references found within the attributes of the element, and optionally, its children.
     *
     * @param string $web_id The ID of the element. (required)
     * @param bool $include_child_elements If true, includes the child elements of the specified element. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function elementCreateConfig($web_id, $include_child_elements = null)
    {
        list($response) = $this->elementCreateConfigWithHttpInfo($web_id, $include_child_elements);
        return $response;
    }

    /**
     * Operation elementCreateConfigWithHttpInfo
     *
     * Executes the create configuration function of the data references found within the attributes of the element, and optionally, its children.
     *
     * @param string $web_id The ID of the element. (required)
     * @param bool $include_child_elements If true, includes the child elements of the specified element. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementCreateConfigWithHttpInfo($web_id, $include_child_elements = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementCreateConfig');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/config";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // query params
        if ($include_child_elements !== null) {
            $queryParams['includeChildElements'] = $this->apiClient->getSerializer()->toQueryValue($include_child_elements);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/elements/{webId}/config'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation elementCreateElement
     *
     * Create a child element.
     *
     * @param string $web_id The ID of the parent element on which to create the element. (required)
     * @param \PIWebAPI\Client\Model\Element $element The new element definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function elementCreateElement($web_id, $element)
    {
        list($response) = $this->elementCreateElementWithHttpInfo($web_id, $element);
        return $response;
    }

    /**
     * Operation elementCreateElementWithHttpInfo
     *
     * Create a child element.
     *
     * @param string $web_id The ID of the parent element on which to create the element. (required)
     * @param \PIWebAPI\Client\Model\Element $element The new element definition. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementCreateElementWithHttpInfo($web_id, $element)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementCreateElement');
        }
        // verify the required parameter 'element' is set
        if ($element === null) {
            throw new \InvalidArgumentException('Missing the required parameter $element when calling elementCreateElement');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/elements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($element)) {
            $_tempBody = $element;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/elements/{webId}/elements'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation elementCreateSearchByAttribute
     *
     * Create a link for a \"Search Elements By Attribute Value\" operation, whose queries are specified in the request content. The SearchRoot is specified by the Web Id of the root Element. If the SearchRoot is not specified, then the search starts at the Asset Database. ElementTemplate must be provided as the Web ID of the ElementTemplate, which are used to create the Elements. All the attributes in the queries must be defined as AttributeTemplates on the ElementTemplate. An array of attribute value queries are ANDed together to find the desired Element objects. At least one value query must be specified. There are limitations on SearchOperators.
     *
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function elementCreateSearchByAttribute()
    {
        list($response) = $this->elementCreateSearchByAttributeWithHttpInfo();
        return $response;
    }

    /**
     * Operation elementCreateSearchByAttributeWithHttpInfo
     *
     * Create a link for a \"Search Elements By Attribute Value\" operation, whose queries are specified in the request content. The SearchRoot is specified by the Web Id of the root Element. If the SearchRoot is not specified, then the search starts at the Asset Database. ElementTemplate must be provided as the Web ID of the ElementTemplate, which are used to create the Elements. All the attributes in the queries must be defined as AttributeTemplates on the ElementTemplate. An array of attribute value queries are ANDed together to find the desired Element objects. At least one value query must be specified. There are limitations on SearchOperators.
     *
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementCreateSearchByAttributeWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/elements/searchbyattribute";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/elements/searchbyattribute'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementCreateSecurityEntry
     *
     * Create a security entry owned by the element.
     *
     * @param string $web_id The ID of the element where the security entry will be created. (required)
     * @param \PIWebAPI\Client\Model\SecurityEntry $security_entry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function elementCreateSecurityEntry($web_id, $security_entry, $apply_to_children = null)
    {
        list($response) = $this->elementCreateSecurityEntryWithHttpInfo($web_id, $security_entry, $apply_to_children);
        return $response;
    }

    /**
     * Operation elementCreateSecurityEntryWithHttpInfo
     *
     * Create a security entry owned by the element.
     *
     * @param string $web_id The ID of the element where the security entry will be created. (required)
     * @param \PIWebAPI\Client\Model\SecurityEntry $security_entry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementCreateSecurityEntryWithHttpInfo($web_id, $security_entry, $apply_to_children = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementCreateSecurityEntry');
        }
        // verify the required parameter 'security_entry' is set
        if ($security_entry === null) {
            throw new \InvalidArgumentException('Missing the required parameter $security_entry when calling elementCreateSecurityEntry');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/securityentries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // query params
        if ($apply_to_children !== null) {
            $queryParams['applyToChildren'] = $this->apiClient->getSerializer()->toQueryValue($apply_to_children);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($security_entry)) {
            $_tempBody = $security_entry;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/elements/{webId}/securityentries'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation elementDelete
     *
     * Delete an element.
     *
     * @param string $web_id The ID of the element. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function elementDelete($web_id)
    {
        list($response) = $this->elementDeleteWithHttpInfo($web_id);
        return $response;
    }

    /**
     * Operation elementDeleteWithHttpInfo
     *
     * Delete an element.
     *
     * @param string $web_id The ID of the element. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementDeleteWithHttpInfo($web_id)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementDelete');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/elements/{webId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation elementDeleteSecurityEntry
     *
     * Delete a security entry owned by the element.
     *
     * @param string $name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param string $web_id The ID of the element where the security entry will be deleted. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function elementDeleteSecurityEntry($name, $web_id, $apply_to_children = null)
    {
        list($response) = $this->elementDeleteSecurityEntryWithHttpInfo($name, $web_id, $apply_to_children);
        return $response;
    }

    /**
     * Operation elementDeleteSecurityEntryWithHttpInfo
     *
     * Delete a security entry owned by the element.
     *
     * @param string $name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param string $web_id The ID of the element where the security entry will be deleted. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementDeleteSecurityEntryWithHttpInfo($name, $web_id, $apply_to_children = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling elementDeleteSecurityEntry');
        }
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementDeleteSecurityEntry');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/securityentries/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apply_to_children !== null) {
            $queryParams['applyToChildren'] = $this->apiClient->getSerializer()->toQueryValue($apply_to_children);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/elements/{webId}/securityentries/{name}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation elementExecuteSearchByAttribute
     *
     * Execute a \"Search Elements By Attribute Value\" operation.
     *
     * @param string $search_id The encoded search Id of the \&quot;Search Elements By Attribute Value\&quot; operation. (required)
     * @param string $category_name Specify that the owner of the returned attributes must have this category. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param string $description_filter The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param int $max_count The maximum number of objects to be returned. The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding objects. The default is no filter. (optional)
     * @param bool $search_full_hierarchy Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function elementExecuteSearchByAttribute($search_id, $category_name = null, $description_filter = null, $max_count = null, $name_filter = null, $search_full_hierarchy = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null)
    {
        list($response) = $this->elementExecuteSearchByAttributeWithHttpInfo($search_id, $category_name, $description_filter, $max_count, $name_filter, $search_full_hierarchy, $selected_fields, $sort_field, $sort_order, $start_index);
        return $response;
    }

    /**
     * Operation elementExecuteSearchByAttributeWithHttpInfo
     *
     * Execute a \"Search Elements By Attribute Value\" operation.
     *
     * @param string $search_id The encoded search Id of the \&quot;Search Elements By Attribute Value\&quot; operation. (required)
     * @param string $category_name Specify that the owner of the returned attributes must have this category. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param string $description_filter The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param int $max_count The maximum number of objects to be returned. The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding objects. The default is no filter. (optional)
     * @param bool $search_full_hierarchy Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementExecuteSearchByAttributeWithHttpInfo($search_id, $category_name = null, $description_filter = null, $max_count = null, $name_filter = null, $search_full_hierarchy = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null)
    {
        // verify the required parameter 'search_id' is set
        if ($search_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $search_id when calling elementExecuteSearchByAttribute');
        }
        // parse inputs
        $resourcePath = "/elements/searchbyattribute/{searchId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($category_name !== null) {
            $queryParams['categoryName'] = $this->apiClient->getSerializer()->toQueryValue($category_name);
        }
        // query params
        if ($description_filter !== null) {
            $queryParams['descriptionFilter'] = $this->apiClient->getSerializer()->toQueryValue($description_filter);
        }
        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($name_filter !== null) {
            $queryParams['nameFilter'] = $this->apiClient->getSerializer()->toQueryValue($name_filter);
        }
        // query params
        if ($search_full_hierarchy !== null) {
            $queryParams['searchFullHierarchy'] = $this->apiClient->getSerializer()->toQueryValue($search_full_hierarchy);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // path params
        if ($search_id !== null) {
            $resourcePath = str_replace(
                "{" . "searchId" . "}",
                $this->apiClient->getSerializer()->toPathValue($search_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/elements/searchbyattribute/{searchId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementFindElementAttributes
     *
     * Retrieves a list of element attributes matching the specified filters from the specified element.
     *
     * @param string $web_id The ID of the element to use as the root of the search. (required)
     * @param string $attribute_category Specify that returned attributes must have this category. The default is no filter. (optional)
     * @param string $attribute_description_filter The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param string $attribute_name_filter The attribute name filter string used for finding objects. The default is no filter. (optional)
     * @param string $attribute_type Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)
     * @param string $element_category Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)
     * @param string $element_description_filter The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param string $element_name_filter The element name filter string used for finding objects. The default is no filter. (optional)
     * @param string $element_template Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)
     * @param string $element_type Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)
     * @param int $max_count The maximum number of objects to be returned (the page size). The default is 1000. (optional)
     * @param bool $search_full_hierarchy Specifies if the search should include objects nested further than immediate children of the given resource. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsAttribute
     */
    public function elementFindElementAttributes($web_id, $attribute_category = null, $attribute_description_filter = null, $attribute_name_filter = null, $attribute_type = null, $element_category = null, $element_description_filter = null, $element_name_filter = null, $element_template = null, $element_type = null, $max_count = null, $search_full_hierarchy = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null)
    {
        list($response) = $this->elementFindElementAttributesWithHttpInfo($web_id, $attribute_category, $attribute_description_filter, $attribute_name_filter, $attribute_type, $element_category, $element_description_filter, $element_name_filter, $element_template, $element_type, $max_count, $search_full_hierarchy, $selected_fields, $sort_field, $sort_order, $start_index);
        return $response;
    }

    /**
     * Operation elementFindElementAttributesWithHttpInfo
     *
     * Retrieves a list of element attributes matching the specified filters from the specified element.
     *
     * @param string $web_id The ID of the element to use as the root of the search. (required)
     * @param string $attribute_category Specify that returned attributes must have this category. The default is no filter. (optional)
     * @param string $attribute_description_filter The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param string $attribute_name_filter The attribute name filter string used for finding objects. The default is no filter. (optional)
     * @param string $attribute_type Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)
     * @param string $element_category Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)
     * @param string $element_description_filter The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param string $element_name_filter The element name filter string used for finding objects. The default is no filter. (optional)
     * @param string $element_template Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)
     * @param string $element_type Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)
     * @param int $max_count The maximum number of objects to be returned (the page size). The default is 1000. (optional)
     * @param bool $search_full_hierarchy Specifies if the search should include objects nested further than immediate children of the given resource. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsAttribute, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementFindElementAttributesWithHttpInfo($web_id, $attribute_category = null, $attribute_description_filter = null, $attribute_name_filter = null, $attribute_type = null, $element_category = null, $element_description_filter = null, $element_name_filter = null, $element_template = null, $element_type = null, $max_count = null, $search_full_hierarchy = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementFindElementAttributes');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/elementattributes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($attribute_category !== null) {
            $queryParams['attributeCategory'] = $this->apiClient->getSerializer()->toQueryValue($attribute_category);
        }
        // query params
        if ($attribute_description_filter !== null) {
            $queryParams['attributeDescriptionFilter'] = $this->apiClient->getSerializer()->toQueryValue($attribute_description_filter);
        }
        // query params
        if ($attribute_name_filter !== null) {
            $queryParams['attributeNameFilter'] = $this->apiClient->getSerializer()->toQueryValue($attribute_name_filter);
        }
        // query params
        if ($attribute_type !== null) {
            $queryParams['attributeType'] = $this->apiClient->getSerializer()->toQueryValue($attribute_type);
        }
        // query params
        if ($element_category !== null) {
            $queryParams['elementCategory'] = $this->apiClient->getSerializer()->toQueryValue($element_category);
        }
        // query params
        if ($element_description_filter !== null) {
            $queryParams['elementDescriptionFilter'] = $this->apiClient->getSerializer()->toQueryValue($element_description_filter);
        }
        // query params
        if ($element_name_filter !== null) {
            $queryParams['elementNameFilter'] = $this->apiClient->getSerializer()->toQueryValue($element_name_filter);
        }
        // query params
        if ($element_template !== null) {
            $queryParams['elementTemplate'] = $this->apiClient->getSerializer()->toQueryValue($element_template);
        }
        // query params
        if ($element_type !== null) {
            $queryParams['elementType'] = $this->apiClient->getSerializer()->toQueryValue($element_type);
        }
        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($search_full_hierarchy !== null) {
            $queryParams['searchFullHierarchy'] = $this->apiClient->getSerializer()->toQueryValue($search_full_hierarchy);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsAttribute',
                '/elements/{webId}/elementattributes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsAttribute', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsAttribute', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementGet
     *
     * Retrieve an element.
     *
     * @param string $web_id The ID of the element. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\Element
     */
    public function elementGet($web_id, $selected_fields = null)
    {
        list($response) = $this->elementGetWithHttpInfo($web_id, $selected_fields);
        return $response;
    }

    /**
     * Operation elementGetWithHttpInfo
     *
     * Retrieve an element.
     *
     * @param string $web_id The ID of the element. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\Element, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementGetWithHttpInfo($web_id, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementGet');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\Element',
                '/elements/{webId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\Element', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Element', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementGetAnalyses
     *
     * Retrieve analyses based on the specified conditions.
     *
     * @param string $web_id The ID of the element, which is the Target of the analyses. (required)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsAnalysis
     */
    public function elementGetAnalyses($web_id, $max_count = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null)
    {
        list($response) = $this->elementGetAnalysesWithHttpInfo($web_id, $max_count, $selected_fields, $sort_field, $sort_order, $start_index);
        return $response;
    }

    /**
     * Operation elementGetAnalysesWithHttpInfo
     *
     * Retrieve analyses based on the specified conditions.
     *
     * @param string $web_id The ID of the element, which is the Target of the analyses. (required)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsAnalysis, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementGetAnalysesWithHttpInfo($web_id, $max_count = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementGetAnalyses');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/analyses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsAnalysis',
                '/elements/{webId}/analyses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsAnalysis', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsAnalysis', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementGetAttributes
     *
     * Get the attributes of the specified element.
     *
     * @param string $web_id The ID of the element. (required)
     * @param string $category_name Specify that returned attributes must have this category. The default is no category filter. (optional)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding attributes. The default is no filter. (optional)
     * @param bool $search_full_hierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param bool $show_excluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param bool $show_hidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $template_name Specify that returned attributes must be members of this template. The default is no template filter. (optional)
     * @param string $value_type Specify that returned attributes&#39; value type must be the given value type. The default is no value type filter. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsAttribute
     */
    public function elementGetAttributes($web_id, $category_name = null, $max_count = null, $name_filter = null, $search_full_hierarchy = null, $selected_fields = null, $show_excluded = null, $show_hidden = null, $sort_field = null, $sort_order = null, $start_index = null, $template_name = null, $value_type = null)
    {
        list($response) = $this->elementGetAttributesWithHttpInfo($web_id, $category_name, $max_count, $name_filter, $search_full_hierarchy, $selected_fields, $show_excluded, $show_hidden, $sort_field, $sort_order, $start_index, $template_name, $value_type);
        return $response;
    }

    /**
     * Operation elementGetAttributesWithHttpInfo
     *
     * Get the attributes of the specified element.
     *
     * @param string $web_id The ID of the element. (required)
     * @param string $category_name Specify that returned attributes must have this category. The default is no category filter. (optional)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding attributes. The default is no filter. (optional)
     * @param bool $search_full_hierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param bool $show_excluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param bool $show_hidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $template_name Specify that returned attributes must be members of this template. The default is no template filter. (optional)
     * @param string $value_type Specify that returned attributes&#39; value type must be the given value type. The default is no value type filter. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsAttribute, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementGetAttributesWithHttpInfo($web_id, $category_name = null, $max_count = null, $name_filter = null, $search_full_hierarchy = null, $selected_fields = null, $show_excluded = null, $show_hidden = null, $sort_field = null, $sort_order = null, $start_index = null, $template_name = null, $value_type = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementGetAttributes');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/attributes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($category_name !== null) {
            $queryParams['categoryName'] = $this->apiClient->getSerializer()->toQueryValue($category_name);
        }
        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($name_filter !== null) {
            $queryParams['nameFilter'] = $this->apiClient->getSerializer()->toQueryValue($name_filter);
        }
        // query params
        if ($search_full_hierarchy !== null) {
            $queryParams['searchFullHierarchy'] = $this->apiClient->getSerializer()->toQueryValue($search_full_hierarchy);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if ($show_excluded !== null) {
            $queryParams['showExcluded'] = $this->apiClient->getSerializer()->toQueryValue($show_excluded);
        }
        // query params
        if ($show_hidden !== null) {
            $queryParams['showHidden'] = $this->apiClient->getSerializer()->toQueryValue($show_hidden);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($template_name !== null) {
            $queryParams['templateName'] = $this->apiClient->getSerializer()->toQueryValue($template_name);
        }
        // query params
        if ($value_type !== null) {
            $queryParams['valueType'] = $this->apiClient->getSerializer()->toQueryValue($value_type);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsAttribute',
                '/elements/{webId}/attributes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsAttribute', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsAttribute', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementGetByPath
     *
     * Retrieve an element by path.
     *
     * @param string $path The path to the element. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\Element
     */
    public function elementGetByPath($path, $selected_fields = null)
    {
        list($response) = $this->elementGetByPathWithHttpInfo($path, $selected_fields);
        return $response;
    }

    /**
     * Operation elementGetByPathWithHttpInfo
     *
     * Retrieve an element by path.
     *
     * @param string $path The path to the element. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\Element, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementGetByPathWithHttpInfo($path, $selected_fields = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling elementGetByPath');
        }
        // parse inputs
        $resourcePath = "/elements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\Element',
                '/elements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\Element', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Element', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementGetCategories
     *
     * Get an element's categories.
     *
     * @param string $web_id The ID of the element. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsElementCategory
     */
    public function elementGetCategories($web_id, $selected_fields = null)
    {
        list($response) = $this->elementGetCategoriesWithHttpInfo($web_id, $selected_fields);
        return $response;
    }

    /**
     * Operation elementGetCategoriesWithHttpInfo
     *
     * Get an element's categories.
     *
     * @param string $web_id The ID of the element. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsElementCategory, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementGetCategoriesWithHttpInfo($web_id, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementGetCategories');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsElementCategory',
                '/elements/{webId}/categories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsElementCategory', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsElementCategory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementGetElements
     *
     * Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified element.
     *
     * @param string $web_id The ID of the element to use as the root of the search. (required)
     * @param string $category_name Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param string $description_filter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param string $element_type Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding objects. The default is no filter. (optional)
     * @param bool $search_full_hierarchy Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $template_name Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsElement
     */
    public function elementGetElements($web_id, $category_name = null, $description_filter = null, $element_type = null, $max_count = null, $name_filter = null, $search_full_hierarchy = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null, $template_name = null)
    {
        list($response) = $this->elementGetElementsWithHttpInfo($web_id, $category_name, $description_filter, $element_type, $max_count, $name_filter, $search_full_hierarchy, $selected_fields, $sort_field, $sort_order, $start_index, $template_name);
        return $response;
    }

    /**
     * Operation elementGetElementsWithHttpInfo
     *
     * Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified element.
     *
     * @param string $web_id The ID of the element to use as the root of the search. (required)
     * @param string $category_name Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param string $description_filter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param string $element_type Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding objects. The default is no filter. (optional)
     * @param bool $search_full_hierarchy Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $template_name Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsElement, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementGetElementsWithHttpInfo($web_id, $category_name = null, $description_filter = null, $element_type = null, $max_count = null, $name_filter = null, $search_full_hierarchy = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null, $template_name = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementGetElements');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/elements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($category_name !== null) {
            $queryParams['categoryName'] = $this->apiClient->getSerializer()->toQueryValue($category_name);
        }
        // query params
        if ($description_filter !== null) {
            $queryParams['descriptionFilter'] = $this->apiClient->getSerializer()->toQueryValue($description_filter);
        }
        // query params
        if ($element_type !== null) {
            $queryParams['elementType'] = $this->apiClient->getSerializer()->toQueryValue($element_type);
        }
        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($name_filter !== null) {
            $queryParams['nameFilter'] = $this->apiClient->getSerializer()->toQueryValue($name_filter);
        }
        // query params
        if ($search_full_hierarchy !== null) {
            $queryParams['searchFullHierarchy'] = $this->apiClient->getSerializer()->toQueryValue($search_full_hierarchy);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($template_name !== null) {
            $queryParams['templateName'] = $this->apiClient->getSerializer()->toQueryValue($template_name);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsElement',
                '/elements/{webId}/elements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsElement', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsElement', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementGetEventFrames
     *
     * Retrieve event frames that reference this element based on the specified conditions. By default, returns all event frames that reference this element with a start time in the past 8 hours.
     *
     * @param string $web_id The ID of the element whose related event frames are sought. (required)
     * @param bool $can_be_acknowledged Specify the returned event frames&#39; canBeAcknowledged property. The default is no canBeAcknowledged filter. (optional)
     * @param string $category_name Specify that returned event frames must have this category. The default is no category filter. (optional)
     * @param string $end_time The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param bool $is_acknowledged Specify the returned event frames&#39; isAcknowledged property. The default no isAcknowledged filter. (optional)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding event frames. The default is no filter. (optional)
     * @param string $search_mode Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of endTime, sortField, or sortOrder may be specified. The default is &#39;Overlapped&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string[] $severity Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $start_time The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*-8h&#39;. (optional)
     * @param string $template_name Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsEventFrame
     */
    public function elementGetEventFrames($web_id, $can_be_acknowledged = null, $category_name = null, $end_time = null, $is_acknowledged = null, $max_count = null, $name_filter = null, $search_mode = null, $selected_fields = null, $severity = null, $sort_field = null, $sort_order = null, $start_index = null, $start_time = null, $template_name = null)
    {
        list($response) = $this->elementGetEventFramesWithHttpInfo($web_id, $can_be_acknowledged, $category_name, $end_time, $is_acknowledged, $max_count, $name_filter, $search_mode, $selected_fields, $severity, $sort_field, $sort_order, $start_index, $start_time, $template_name);
        return $response;
    }

    /**
     * Operation elementGetEventFramesWithHttpInfo
     *
     * Retrieve event frames that reference this element based on the specified conditions. By default, returns all event frames that reference this element with a start time in the past 8 hours.
     *
     * @param string $web_id The ID of the element whose related event frames are sought. (required)
     * @param bool $can_be_acknowledged Specify the returned event frames&#39; canBeAcknowledged property. The default is no canBeAcknowledged filter. (optional)
     * @param string $category_name Specify that returned event frames must have this category. The default is no category filter. (optional)
     * @param string $end_time The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param bool $is_acknowledged Specify the returned event frames&#39; isAcknowledged property. The default no isAcknowledged filter. (optional)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding event frames. The default is no filter. (optional)
     * @param string $search_mode Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of endTime, sortField, or sortOrder may be specified. The default is &#39;Overlapped&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string[] $severity Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $start_time The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*-8h&#39;. (optional)
     * @param string $template_name Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsEventFrame, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementGetEventFramesWithHttpInfo($web_id, $can_be_acknowledged = null, $category_name = null, $end_time = null, $is_acknowledged = null, $max_count = null, $name_filter = null, $search_mode = null, $selected_fields = null, $severity = null, $sort_field = null, $sort_order = null, $start_index = null, $start_time = null, $template_name = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementGetEventFrames');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/eventframes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($can_be_acknowledged !== null) {
            $queryParams['canBeAcknowledged'] = $this->apiClient->getSerializer()->toQueryValue($can_be_acknowledged);
        }
        // query params
        if ($category_name !== null) {
            $queryParams['categoryName'] = $this->apiClient->getSerializer()->toQueryValue($category_name);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = $this->apiClient->getSerializer()->toQueryValue($end_time);
        }
        // query params
        if ($is_acknowledged !== null) {
            $queryParams['isAcknowledged'] = $this->apiClient->getSerializer()->toQueryValue($is_acknowledged);
        }
        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($name_filter !== null) {
            $queryParams['nameFilter'] = $this->apiClient->getSerializer()->toQueryValue($name_filter);
        }
        // query params
        if ($search_mode !== null) {
            $queryParams['searchMode'] = $this->apiClient->getSerializer()->toQueryValue($search_mode);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if (is_array($severity)) {
            $severity = $this->apiClient->getSerializer()->serializeCollection($severity, 'multi', true);
        }
        if ($severity !== null) {
            $queryParams['severity'] = $this->apiClient->getSerializer()->toQueryValue($severity);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = $this->apiClient->getSerializer()->toQueryValue($start_time);
        }
        // query params
        if ($template_name !== null) {
            $queryParams['templateName'] = $this->apiClient->getSerializer()->toQueryValue($template_name);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsEventFrame',
                '/elements/{webId}/eventframes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsEventFrame', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsEventFrame', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementGetMultiple
     *
     * Retrieve multiple elements by web id or path.
     *
     * @param bool $as_parallel Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is &#39;false&#39;. (optional)
     * @param string $include_mode The include mode for the return list. The default is &#39;All&#39;. (optional)
     * @param string[] $path The path of an element. Multiple elements may be specified with multiple instances of the parameter. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string[] $web_id The ID of an element. Multiple elements may be specified with multiple instances of the parameter. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsItemElement
     */
    public function elementGetMultiple($as_parallel = null, $include_mode = null, $path = null, $selected_fields = null, $web_id = null)
    {
        list($response) = $this->elementGetMultipleWithHttpInfo($as_parallel, $include_mode, $path, $selected_fields, $web_id);
        return $response;
    }

    /**
     * Operation elementGetMultipleWithHttpInfo
     *
     * Retrieve multiple elements by web id or path.
     *
     * @param bool $as_parallel Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is &#39;false&#39;. (optional)
     * @param string $include_mode The include mode for the return list. The default is &#39;All&#39;. (optional)
     * @param string[] $path The path of an element. Multiple elements may be specified with multiple instances of the parameter. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string[] $web_id The ID of an element. Multiple elements may be specified with multiple instances of the parameter. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsItemElement, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementGetMultipleWithHttpInfo($as_parallel = null, $include_mode = null, $path = null, $selected_fields = null, $web_id = null)
    {
        // parse inputs
        $resourcePath = "/elements/multiple";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($as_parallel !== null) {
            $queryParams['asParallel'] = $this->apiClient->getSerializer()->toQueryValue($as_parallel);
        }
        // query params
        if ($include_mode !== null) {
            $queryParams['includeMode'] = $this->apiClient->getSerializer()->toQueryValue($include_mode);
        }
        // query params
        if (is_array($path)) {
            $path = $this->apiClient->getSerializer()->serializeCollection($path, 'multi', true);
        }
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if (is_array($web_id)) {
            $web_id = $this->apiClient->getSerializer()->serializeCollection($web_id, 'multi', true);
        }
        if ($web_id !== null) {
            $queryParams['webId'] = $this->apiClient->getSerializer()->toQueryValue($web_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsItemElement',
                '/elements/multiple'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsItemElement', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsItemElement', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 207:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsItemElement', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementGetReferencedElements
     *
     * Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements of the current resource.
     *
     * @param string $web_id The ID of the resource to use as the root of the search. (required)
     * @param string $category_name Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param string $description_filter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param string $element_type Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding objects. The default is no filter. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $template_name Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsElement
     */
    public function elementGetReferencedElements($web_id, $category_name = null, $description_filter = null, $element_type = null, $max_count = null, $name_filter = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null, $template_name = null)
    {
        list($response) = $this->elementGetReferencedElementsWithHttpInfo($web_id, $category_name, $description_filter, $element_type, $max_count, $name_filter, $selected_fields, $sort_field, $sort_order, $start_index, $template_name);
        return $response;
    }

    /**
     * Operation elementGetReferencedElementsWithHttpInfo
     *
     * Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements of the current resource.
     *
     * @param string $web_id The ID of the resource to use as the root of the search. (required)
     * @param string $category_name Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param string $description_filter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param string $element_type Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param int $max_count The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param string $name_filter The name query string used for finding objects. The default is no filter. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param string $sort_field The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param string $sort_order The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param int $start_index The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param string $template_name Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsElement, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementGetReferencedElementsWithHttpInfo($web_id, $category_name = null, $description_filter = null, $element_type = null, $max_count = null, $name_filter = null, $selected_fields = null, $sort_field = null, $sort_order = null, $start_index = null, $template_name = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementGetReferencedElements');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/referencedelements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($category_name !== null) {
            $queryParams['categoryName'] = $this->apiClient->getSerializer()->toQueryValue($category_name);
        }
        // query params
        if ($description_filter !== null) {
            $queryParams['descriptionFilter'] = $this->apiClient->getSerializer()->toQueryValue($description_filter);
        }
        // query params
        if ($element_type !== null) {
            $queryParams['elementType'] = $this->apiClient->getSerializer()->toQueryValue($element_type);
        }
        // query params
        if ($max_count !== null) {
            $queryParams['maxCount'] = $this->apiClient->getSerializer()->toQueryValue($max_count);
        }
        // query params
        if ($name_filter !== null) {
            $queryParams['nameFilter'] = $this->apiClient->getSerializer()->toQueryValue($name_filter);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sort_order);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['startIndex'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($template_name !== null) {
            $queryParams['templateName'] = $this->apiClient->getSerializer()->toQueryValue($template_name);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsElement',
                '/elements/{webId}/referencedelements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsElement', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsElement', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementGetSecurity
     *
     * Get the security information of the specified security item associated with the element for a specified user.
     *
     * @param string $web_id The ID of the element for the security to be checked. (required)
     * @param string[] $user_identity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param bool $force_refresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsSecurityRights
     */
    public function elementGetSecurity($web_id, $user_identity, $force_refresh = null, $selected_fields = null)
    {
        list($response) = $this->elementGetSecurityWithHttpInfo($web_id, $user_identity, $force_refresh, $selected_fields);
        return $response;
    }

    /**
     * Operation elementGetSecurityWithHttpInfo
     *
     * Get the security information of the specified security item associated with the element for a specified user.
     *
     * @param string $web_id The ID of the element for the security to be checked. (required)
     * @param string[] $user_identity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param bool $force_refresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsSecurityRights, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementGetSecurityWithHttpInfo($web_id, $user_identity, $force_refresh = null, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementGetSecurity');
        }
        // verify the required parameter 'user_identity' is set
        if ($user_identity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_identity when calling elementGetSecurity');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/security";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($user_identity)) {
            $user_identity = $this->apiClient->getSerializer()->serializeCollection($user_identity, 'multi', true);
        }
        if ($user_identity !== null) {
            $queryParams['userIdentity'] = $this->apiClient->getSerializer()->toQueryValue($user_identity);
        }
        // query params
        if ($force_refresh !== null) {
            $queryParams['forceRefresh'] = $this->apiClient->getSerializer()->toQueryValue($force_refresh);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsSecurityRights',
                '/elements/{webId}/security'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsSecurityRights', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsSecurityRights', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementGetSecurityEntries
     *
     * Retrieve the security entries associated with the element based on the specified criteria. By default, all security entries for this element are returned.
     *
     * @param string $web_id The ID of the element. (required)
     * @param string $name_filter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\ItemsSecurityEntry
     */
    public function elementGetSecurityEntries($web_id, $name_filter = null, $selected_fields = null)
    {
        list($response) = $this->elementGetSecurityEntriesWithHttpInfo($web_id, $name_filter, $selected_fields);
        return $response;
    }

    /**
     * Operation elementGetSecurityEntriesWithHttpInfo
     *
     * Retrieve the security entries associated with the element based on the specified criteria. By default, all security entries for this element are returned.
     *
     * @param string $web_id The ID of the element. (required)
     * @param string $name_filter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\ItemsSecurityEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementGetSecurityEntriesWithHttpInfo($web_id, $name_filter = null, $selected_fields = null)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementGetSecurityEntries');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/securityentries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($name_filter !== null) {
            $queryParams['nameFilter'] = $this->apiClient->getSerializer()->toQueryValue($name_filter);
        }
        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\ItemsSecurityEntry',
                '/elements/{webId}/securityentries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\ItemsSecurityEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\ItemsSecurityEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementGetSecurityEntryByName
     *
     * Retrieve the security entry associated with the element with the specified name.
     *
     * @param string $name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param string $web_id The ID of the element. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return \PIWebAPI\Client\Model\SecurityEntry
     */
    public function elementGetSecurityEntryByName($name, $web_id, $selected_fields = null)
    {
        list($response) = $this->elementGetSecurityEntryByNameWithHttpInfo($name, $web_id, $selected_fields);
        return $response;
    }

    /**
     * Operation elementGetSecurityEntryByNameWithHttpInfo
     *
     * Retrieve the security entry associated with the element with the specified name.
     *
     * @param string $name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param string $web_id The ID of the element. (required)
     * @param string $selected_fields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of \PIWebAPI\Client\Model\SecurityEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementGetSecurityEntryByNameWithHttpInfo($name, $web_id, $selected_fields = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling elementGetSecurityEntryByName');
        }
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementGetSecurityEntryByName');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/securityentries/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($selected_fields !== null) {
            $queryParams['selectedFields'] = $this->apiClient->getSerializer()->toQueryValue($selected_fields);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PIWebAPI\Client\Model\SecurityEntry',
                '/elements/{webId}/securityentries/{name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\PIWebAPI\Client\Model\SecurityEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\SecurityEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PIWebAPI\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation elementRemoveReferencedElement
     *
     * Remove a reference to an existing element from the child elements collection.
     *
     * @param string $web_id The ID of the element which the referenced element will be removed from. (required)
     * @param string[] $referenced_element_web_id The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function elementRemoveReferencedElement($web_id, $referenced_element_web_id)
    {
        list($response) = $this->elementRemoveReferencedElementWithHttpInfo($web_id, $referenced_element_web_id);
        return $response;
    }

    /**
     * Operation elementRemoveReferencedElementWithHttpInfo
     *
     * Remove a reference to an existing element from the child elements collection.
     *
     * @param string $web_id The ID of the element which the referenced element will be removed from. (required)
     * @param string[] $referenced_element_web_id The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementRemoveReferencedElementWithHttpInfo($web_id, $referenced_element_web_id)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementRemoveReferencedElement');
        }
        // verify the required parameter 'referenced_element_web_id' is set
        if ($referenced_element_web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $referenced_element_web_id when calling elementRemoveReferencedElement');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/referencedelements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($referenced_element_web_id)) {
            $referenced_element_web_id = $this->apiClient->getSerializer()->serializeCollection($referenced_element_web_id, 'multi', true);
        }
        if ($referenced_element_web_id !== null) {
            $queryParams['referencedElementWebId'] = $this->apiClient->getSerializer()->toQueryValue($referenced_element_web_id);
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/elements/{webId}/referencedelements'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation elementUpdate
     *
     * Update an element by replacing items in its definition.
     *
     * @param string $web_id The ID of the element. (required)
     * @param \PIWebAPI\Client\Model\Element $element A partial element containing the desired changes. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function elementUpdate($web_id, $element)
    {
        list($response) = $this->elementUpdateWithHttpInfo($web_id, $element);
        return $response;
    }

    /**
     * Operation elementUpdateWithHttpInfo
     *
     * Update an element by replacing items in its definition.
     *
     * @param string $web_id The ID of the element. (required)
     * @param \PIWebAPI\Client\Model\Element $element A partial element containing the desired changes. (required)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementUpdateWithHttpInfo($web_id, $element)
    {
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementUpdate');
        }
        // verify the required parameter 'element' is set
        if ($element === null) {
            throw new \InvalidArgumentException('Missing the required parameter $element when calling elementUpdate');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($element)) {
            $_tempBody = $element;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/elements/{webId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation elementUpdateSecurityEntry
     *
     * Update a security entry owned by the element.
     *
     * @param string $name The name of the security entry. (required)
     * @param string $web_id The ID of the element where the security entry will be updated. (required)
     * @param \PIWebAPI\Client\Model\SecurityEntry $security_entry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return void
     */
    public function elementUpdateSecurityEntry($name, $web_id, $security_entry, $apply_to_children = null)
    {
        list($response) = $this->elementUpdateSecurityEntryWithHttpInfo($name, $web_id, $security_entry, $apply_to_children);
        return $response;
    }

    /**
     * Operation elementUpdateSecurityEntryWithHttpInfo
     *
     * Update a security entry owned by the element.
     *
     * @param string $name The name of the security entry. (required)
     * @param string $web_id The ID of the element where the security entry will be updated. (required)
     * @param \PIWebAPI\Client\Model\SecurityEntry $security_entry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param bool $apply_to_children If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws \PIWebAPI\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementUpdateSecurityEntryWithHttpInfo($name, $web_id, $security_entry, $apply_to_children = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling elementUpdateSecurityEntry');
        }
        // verify the required parameter 'web_id' is set
        if ($web_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_id when calling elementUpdateSecurityEntry');
        }
        // verify the required parameter 'security_entry' is set
        if ($security_entry === null) {
            throw new \InvalidArgumentException('Missing the required parameter $security_entry when calling elementUpdateSecurityEntry');
        }
        // parse inputs
        $resourcePath = "/elements/{webId}/securityentries/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/html', 'application/x-ms-application']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json']);

        // query params
        if ($apply_to_children !== null) {
            $queryParams['applyToChildren'] = $this->apiClient->getSerializer()->toQueryValue($apply_to_children);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($web_id !== null) {
            $resourcePath = str_replace(
                "{" . "webId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($security_entry)) {
            $_tempBody = $security_entry;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/elements/{webId}/securityentries/{name}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
