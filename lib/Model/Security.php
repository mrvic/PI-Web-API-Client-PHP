<?php
/**
 * Security
 *
 * PHP version 5
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PI Web API 2017 Swagger Spec
 *
 * Swagger Spec file that describes PI Web API
 *
 * OpenAPI spec version: 1.9.0.235
 * Contact: techsupport@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PIWebAPI\Client\Model;

use \ArrayAccess;

/**
 * Security Class Doc Comment
 *
 * @category    Class */
/**
 * @package     PIWebAPI\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Security implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Security';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'can_annotate' => 'bool',
        'can_delete' => 'bool',
        'can_execute' => 'bool',
        'can_read' => 'bool',
        'can_read_data' => 'bool',
        'can_subscribe' => 'bool',
        'can_subscribe_others' => 'bool',
        'can_write' => 'bool',
        'can_write_data' => 'bool',
        'has_admin' => 'bool',
        'rights' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'can_annotate' => 'CanAnnotate',
        'can_delete' => 'CanDelete',
        'can_execute' => 'CanExecute',
        'can_read' => 'CanRead',
        'can_read_data' => 'CanReadData',
        'can_subscribe' => 'CanSubscribe',
        'can_subscribe_others' => 'CanSubscribeOthers',
        'can_write' => 'CanWrite',
        'can_write_data' => 'CanWriteData',
        'has_admin' => 'HasAdmin',
        'rights' => 'Rights'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'can_annotate' => 'setCanAnnotate',
        'can_delete' => 'setCanDelete',
        'can_execute' => 'setCanExecute',
        'can_read' => 'setCanRead',
        'can_read_data' => 'setCanReadData',
        'can_subscribe' => 'setCanSubscribe',
        'can_subscribe_others' => 'setCanSubscribeOthers',
        'can_write' => 'setCanWrite',
        'can_write_data' => 'setCanWriteData',
        'has_admin' => 'setHasAdmin',
        'rights' => 'setRights'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'can_annotate' => 'getCanAnnotate',
        'can_delete' => 'getCanDelete',
        'can_execute' => 'getCanExecute',
        'can_read' => 'getCanRead',
        'can_read_data' => 'getCanReadData',
        'can_subscribe' => 'getCanSubscribe',
        'can_subscribe_others' => 'getCanSubscribeOthers',
        'can_write' => 'getCanWrite',
        'can_write_data' => 'getCanWriteData',
        'has_admin' => 'getHasAdmin',
        'rights' => 'getRights'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can_annotate'] = isset($data['can_annotate']) ? $data['can_annotate'] : null;
        $this->container['can_delete'] = isset($data['can_delete']) ? $data['can_delete'] : null;
        $this->container['can_execute'] = isset($data['can_execute']) ? $data['can_execute'] : null;
        $this->container['can_read'] = isset($data['can_read']) ? $data['can_read'] : null;
        $this->container['can_read_data'] = isset($data['can_read_data']) ? $data['can_read_data'] : null;
        $this->container['can_subscribe'] = isset($data['can_subscribe']) ? $data['can_subscribe'] : null;
        $this->container['can_subscribe_others'] = isset($data['can_subscribe_others']) ? $data['can_subscribe_others'] : null;
        $this->container['can_write'] = isset($data['can_write']) ? $data['can_write'] : null;
        $this->container['can_write_data'] = isset($data['can_write_data']) ? $data['can_write_data'] : null;
        $this->container['has_admin'] = isset($data['has_admin']) ? $data['has_admin'] : null;
        $this->container['rights'] = isset($data['rights']) ? $data['rights'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets can_annotate
     * @return bool
     */
    public function getCanAnnotate()
    {
        return $this->container['can_annotate'];
    }

    /**
     * Sets can_annotate
     * @param bool $can_annotate
     * @return $this
     */
    public function setCanAnnotate($can_annotate)
    {
        $this->container['can_annotate'] = $can_annotate;

        return $this;
    }

    /**
     * Gets can_delete
     * @return bool
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     * @param bool $can_delete
     * @return $this
     */
    public function setCanDelete($can_delete)
    {
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets can_execute
     * @return bool
     */
    public function getCanExecute()
    {
        return $this->container['can_execute'];
    }

    /**
     * Sets can_execute
     * @param bool $can_execute
     * @return $this
     */
    public function setCanExecute($can_execute)
    {
        $this->container['can_execute'] = $can_execute;

        return $this;
    }

    /**
     * Gets can_read
     * @return bool
     */
    public function getCanRead()
    {
        return $this->container['can_read'];
    }

    /**
     * Sets can_read
     * @param bool $can_read
     * @return $this
     */
    public function setCanRead($can_read)
    {
        $this->container['can_read'] = $can_read;

        return $this;
    }

    /**
     * Gets can_read_data
     * @return bool
     */
    public function getCanReadData()
    {
        return $this->container['can_read_data'];
    }

    /**
     * Sets can_read_data
     * @param bool $can_read_data
     * @return $this
     */
    public function setCanReadData($can_read_data)
    {
        $this->container['can_read_data'] = $can_read_data;

        return $this;
    }

    /**
     * Gets can_subscribe
     * @return bool
     */
    public function getCanSubscribe()
    {
        return $this->container['can_subscribe'];
    }

    /**
     * Sets can_subscribe
     * @param bool $can_subscribe
     * @return $this
     */
    public function setCanSubscribe($can_subscribe)
    {
        $this->container['can_subscribe'] = $can_subscribe;

        return $this;
    }

    /**
     * Gets can_subscribe_others
     * @return bool
     */
    public function getCanSubscribeOthers()
    {
        return $this->container['can_subscribe_others'];
    }

    /**
     * Sets can_subscribe_others
     * @param bool $can_subscribe_others
     * @return $this
     */
    public function setCanSubscribeOthers($can_subscribe_others)
    {
        $this->container['can_subscribe_others'] = $can_subscribe_others;

        return $this;
    }

    /**
     * Gets can_write
     * @return bool
     */
    public function getCanWrite()
    {
        return $this->container['can_write'];
    }

    /**
     * Sets can_write
     * @param bool $can_write
     * @return $this
     */
    public function setCanWrite($can_write)
    {
        $this->container['can_write'] = $can_write;

        return $this;
    }

    /**
     * Gets can_write_data
     * @return bool
     */
    public function getCanWriteData()
    {
        return $this->container['can_write_data'];
    }

    /**
     * Sets can_write_data
     * @param bool $can_write_data
     * @return $this
     */
    public function setCanWriteData($can_write_data)
    {
        $this->container['can_write_data'] = $can_write_data;

        return $this;
    }

    /**
     * Gets has_admin
     * @return bool
     */
    public function getHasAdmin()
    {
        return $this->container['has_admin'];
    }

    /**
     * Sets has_admin
     * @param bool $has_admin
     * @return $this
     */
    public function setHasAdmin($has_admin)
    {
        $this->container['has_admin'] = $has_admin;

        return $this;
    }

    /**
     * Gets rights
     * @return string[]
     */
    public function getRights()
    {
        return $this->container['rights'];
    }

    /**
     * Sets rights
     * @param string[] $rights
     * @return $this
     */
    public function setRights($rights)
    {
        $this->container['rights'] = $rights;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

