<?php
/**
 * AssetDatabaseLinks
 *
 * PHP version 5
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PI Web API 2017 Swagger Spec
 *
 * Swagger Spec file that describes PI Web API
 *
 * OpenAPI spec version: 1.9.0.235
 * Contact: techsupport@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PIWebAPI\Client\Model;

use \ArrayAccess;

/**
 * AssetDatabaseLinks Class Doc Comment
 *
 * @category    Class */
/**
 * @package     PIWebAPI\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AssetDatabaseLinks implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AssetDatabase_Links';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'self' => 'string',
        'elements' => 'string',
        'element_templates' => 'string',
        'event_frames' => 'string',
        'asset_server' => 'string',
        'element_categories' => 'string',
        'attribute_categories' => 'string',
        'table_categories' => 'string',
        'analysis_categories' => 'string',
        'analysis_templates' => 'string',
        'enumeration_sets' => 'string',
        'tables' => 'string',
        'security' => 'string',
        'security_entries' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'Self',
        'elements' => 'Elements',
        'element_templates' => 'ElementTemplates',
        'event_frames' => 'EventFrames',
        'asset_server' => 'AssetServer',
        'element_categories' => 'ElementCategories',
        'attribute_categories' => 'AttributeCategories',
        'table_categories' => 'TableCategories',
        'analysis_categories' => 'AnalysisCategories',
        'analysis_templates' => 'AnalysisTemplates',
        'enumeration_sets' => 'EnumerationSets',
        'tables' => 'Tables',
        'security' => 'Security',
        'security_entries' => 'SecurityEntries'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'elements' => 'setElements',
        'element_templates' => 'setElementTemplates',
        'event_frames' => 'setEventFrames',
        'asset_server' => 'setAssetServer',
        'element_categories' => 'setElementCategories',
        'attribute_categories' => 'setAttributeCategories',
        'table_categories' => 'setTableCategories',
        'analysis_categories' => 'setAnalysisCategories',
        'analysis_templates' => 'setAnalysisTemplates',
        'enumeration_sets' => 'setEnumerationSets',
        'tables' => 'setTables',
        'security' => 'setSecurity',
        'security_entries' => 'setSecurityEntries'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'elements' => 'getElements',
        'element_templates' => 'getElementTemplates',
        'event_frames' => 'getEventFrames',
        'asset_server' => 'getAssetServer',
        'element_categories' => 'getElementCategories',
        'attribute_categories' => 'getAttributeCategories',
        'table_categories' => 'getTableCategories',
        'analysis_categories' => 'getAnalysisCategories',
        'analysis_templates' => 'getAnalysisTemplates',
        'enumeration_sets' => 'getEnumerationSets',
        'tables' => 'getTables',
        'security' => 'getSecurity',
        'security_entries' => 'getSecurityEntries'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['self'] = isset($data['self']) ? $data['self'] : null;
        $this->container['elements'] = isset($data['elements']) ? $data['elements'] : null;
        $this->container['element_templates'] = isset($data['element_templates']) ? $data['element_templates'] : null;
        $this->container['event_frames'] = isset($data['event_frames']) ? $data['event_frames'] : null;
        $this->container['asset_server'] = isset($data['asset_server']) ? $data['asset_server'] : null;
        $this->container['element_categories'] = isset($data['element_categories']) ? $data['element_categories'] : null;
        $this->container['attribute_categories'] = isset($data['attribute_categories']) ? $data['attribute_categories'] : null;
        $this->container['table_categories'] = isset($data['table_categories']) ? $data['table_categories'] : null;
        $this->container['analysis_categories'] = isset($data['analysis_categories']) ? $data['analysis_categories'] : null;
        $this->container['analysis_templates'] = isset($data['analysis_templates']) ? $data['analysis_templates'] : null;
        $this->container['enumeration_sets'] = isset($data['enumeration_sets']) ? $data['enumeration_sets'] : null;
        $this->container['tables'] = isset($data['tables']) ? $data['tables'] : null;
        $this->container['security'] = isset($data['security']) ? $data['security'] : null;
        $this->container['security_entries'] = isset($data['security_entries']) ? $data['security_entries'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets self
     * @return string
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     * @param string $self
     * @return $this
     */
    public function setSelf($self)
    {
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets elements
     * @return string
     */
    public function getElements()
    {
        return $this->container['elements'];
    }

    /**
     * Sets elements
     * @param string $elements
     * @return $this
     */
    public function setElements($elements)
    {
        $this->container['elements'] = $elements;

        return $this;
    }

    /**
     * Gets element_templates
     * @return string
     */
    public function getElementTemplates()
    {
        return $this->container['element_templates'];
    }

    /**
     * Sets element_templates
     * @param string $element_templates
     * @return $this
     */
    public function setElementTemplates($element_templates)
    {
        $this->container['element_templates'] = $element_templates;

        return $this;
    }

    /**
     * Gets event_frames
     * @return string
     */
    public function getEventFrames()
    {
        return $this->container['event_frames'];
    }

    /**
     * Sets event_frames
     * @param string $event_frames
     * @return $this
     */
    public function setEventFrames($event_frames)
    {
        $this->container['event_frames'] = $event_frames;

        return $this;
    }

    /**
     * Gets asset_server
     * @return string
     */
    public function getAssetServer()
    {
        return $this->container['asset_server'];
    }

    /**
     * Sets asset_server
     * @param string $asset_server
     * @return $this
     */
    public function setAssetServer($asset_server)
    {
        $this->container['asset_server'] = $asset_server;

        return $this;
    }

    /**
     * Gets element_categories
     * @return string
     */
    public function getElementCategories()
    {
        return $this->container['element_categories'];
    }

    /**
     * Sets element_categories
     * @param string $element_categories
     * @return $this
     */
    public function setElementCategories($element_categories)
    {
        $this->container['element_categories'] = $element_categories;

        return $this;
    }

    /**
     * Gets attribute_categories
     * @return string
     */
    public function getAttributeCategories()
    {
        return $this->container['attribute_categories'];
    }

    /**
     * Sets attribute_categories
     * @param string $attribute_categories
     * @return $this
     */
    public function setAttributeCategories($attribute_categories)
    {
        $this->container['attribute_categories'] = $attribute_categories;

        return $this;
    }

    /**
     * Gets table_categories
     * @return string
     */
    public function getTableCategories()
    {
        return $this->container['table_categories'];
    }

    /**
     * Sets table_categories
     * @param string $table_categories
     * @return $this
     */
    public function setTableCategories($table_categories)
    {
        $this->container['table_categories'] = $table_categories;

        return $this;
    }

    /**
     * Gets analysis_categories
     * @return string
     */
    public function getAnalysisCategories()
    {
        return $this->container['analysis_categories'];
    }

    /**
     * Sets analysis_categories
     * @param string $analysis_categories
     * @return $this
     */
    public function setAnalysisCategories($analysis_categories)
    {
        $this->container['analysis_categories'] = $analysis_categories;

        return $this;
    }

    /**
     * Gets analysis_templates
     * @return string
     */
    public function getAnalysisTemplates()
    {
        return $this->container['analysis_templates'];
    }

    /**
     * Sets analysis_templates
     * @param string $analysis_templates
     * @return $this
     */
    public function setAnalysisTemplates($analysis_templates)
    {
        $this->container['analysis_templates'] = $analysis_templates;

        return $this;
    }

    /**
     * Gets enumeration_sets
     * @return string
     */
    public function getEnumerationSets()
    {
        return $this->container['enumeration_sets'];
    }

    /**
     * Sets enumeration_sets
     * @param string $enumeration_sets
     * @return $this
     */
    public function setEnumerationSets($enumeration_sets)
    {
        $this->container['enumeration_sets'] = $enumeration_sets;

        return $this;
    }

    /**
     * Gets tables
     * @return string
     */
    public function getTables()
    {
        return $this->container['tables'];
    }

    /**
     * Sets tables
     * @param string $tables
     * @return $this
     */
    public function setTables($tables)
    {
        $this->container['tables'] = $tables;

        return $this;
    }

    /**
     * Gets security
     * @return string
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     * @param string $security
     * @return $this
     */
    public function setSecurity($security)
    {
        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets security_entries
     * @return string
     */
    public function getSecurityEntries()
    {
        return $this->container['security_entries'];
    }

    /**
     * Sets security_entries
     * @param string $security_entries
     * @return $this
     */
    public function setSecurityEntries($security_entries)
    {
        $this->container['security_entries'] = $security_entries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

