<?php
/**
 * Substatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PI Web API 2017 Swagger Spec
 *
 * Swagger Spec file that describes PI Web API
 *
 * OpenAPI spec version: 1.9.0.235
 * Contact: techsupport@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PIWebAPI\Client\Model;

use \ArrayAccess;

/**
 * Substatus Class Doc Comment
 *
 * @category    Class */
/**
 * @package     PIWebAPI\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Substatus implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Substatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'substatus' => 'int',
        'message' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'substatus' => 'Substatus',
        'message' => 'Message'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'substatus' => 'setSubstatus',
        'message' => 'setMessage'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'substatus' => 'getSubstatus',
        'message' => 'getMessage'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SUBSTATUS_100 = 100;
    const SUBSTATUS_101 = 101;
    const SUBSTATUS_200 = 200;
    const SUBSTATUS_201 = 201;
    const SUBSTATUS_202 = 202;
    const SUBSTATUS_203 = 203;
    const SUBSTATUS_204 = 204;
    const SUBSTATUS_205 = 205;
    const SUBSTATUS_206 = 206;
    const SUBSTATUS_300 = 300;
    const SUBSTATUS_301 = 301;
    const SUBSTATUS_302 = 302;
    const SUBSTATUS_303 = 303;
    const SUBSTATUS_304 = 304;
    const SUBSTATUS_305 = 305;
    const SUBSTATUS_306 = 306;
    const SUBSTATUS_307 = 307;
    const SUBSTATUS_400 = 400;
    const SUBSTATUS_401 = 401;
    const SUBSTATUS_402 = 402;
    const SUBSTATUS_403 = 403;
    const SUBSTATUS_404 = 404;
    const SUBSTATUS_405 = 405;
    const SUBSTATUS_406 = 406;
    const SUBSTATUS_407 = 407;
    const SUBSTATUS_408 = 408;
    const SUBSTATUS_409 = 409;
    const SUBSTATUS_410 = 410;
    const SUBSTATUS_411 = 411;
    const SUBSTATUS_412 = 412;
    const SUBSTATUS_413 = 413;
    const SUBSTATUS_414 = 414;
    const SUBSTATUS_415 = 415;
    const SUBSTATUS_416 = 416;
    const SUBSTATUS_417 = 417;
    const SUBSTATUS_426 = 426;
    const SUBSTATUS_500 = 500;
    const SUBSTATUS_501 = 501;
    const SUBSTATUS_502 = 502;
    const SUBSTATUS_503 = 503;
    const SUBSTATUS_504 = 504;
    const SUBSTATUS_505 = 505;
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSubstatusAllowableValues()
    {
        return [
            self::SUBSTATUS_100,
            self::SUBSTATUS_101,
            self::SUBSTATUS_200,
            self::SUBSTATUS_201,
            self::SUBSTATUS_202,
            self::SUBSTATUS_203,
            self::SUBSTATUS_204,
            self::SUBSTATUS_205,
            self::SUBSTATUS_206,
            self::SUBSTATUS_300,
            self::SUBSTATUS_301,
            self::SUBSTATUS_302,
            self::SUBSTATUS_303,
            self::SUBSTATUS_304,
            self::SUBSTATUS_305,
            self::SUBSTATUS_306,
            self::SUBSTATUS_307,
            self::SUBSTATUS_400,
            self::SUBSTATUS_401,
            self::SUBSTATUS_402,
            self::SUBSTATUS_403,
            self::SUBSTATUS_404,
            self::SUBSTATUS_405,
            self::SUBSTATUS_406,
            self::SUBSTATUS_407,
            self::SUBSTATUS_408,
            self::SUBSTATUS_409,
            self::SUBSTATUS_410,
            self::SUBSTATUS_411,
            self::SUBSTATUS_412,
            self::SUBSTATUS_413,
            self::SUBSTATUS_414,
            self::SUBSTATUS_415,
            self::SUBSTATUS_416,
            self::SUBSTATUS_417,
            self::SUBSTATUS_426,
            self::SUBSTATUS_500,
            self::SUBSTATUS_501,
            self::SUBSTATUS_502,
            self::SUBSTATUS_503,
            self::SUBSTATUS_504,
            self::SUBSTATUS_505,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['substatus'] = isset($data['substatus']) ? $data['substatus'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["100", "101", "200", "201", "202", "203", "204", "205", "206", "300", "301", "302", "303", "304", "305", "306", "307", "400", "401", "402", "403", "404", "405", "406", "407", "408", "409", "410", "411", "412", "413", "414", "415", "416", "417", "426", "500", "501", "502", "503", "504", "505"];
        if (!in_array($this->container['substatus'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'substatus', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["100", "101", "200", "201", "202", "203", "204", "205", "206", "300", "301", "302", "303", "304", "305", "306", "307", "400", "401", "402", "403", "404", "405", "406", "407", "408", "409", "410", "411", "412", "413", "414", "415", "416", "417", "426", "500", "501", "502", "503", "504", "505"];
        if (!in_array($this->container['substatus'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets substatus
     * @return int
     */
    public function getSubstatus()
    {
        return $this->container['substatus'];
    }

    /**
     * Sets substatus
     * @param int $substatus
     * @return $this
     */
    public function setSubstatus($substatus)
    {
        $allowed_values = array('100', '101', '200', '201', '202', '203', '204', '205', '206', '300', '301', '302', '303', '304', '305', '306', '307', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '426', '500', '501', '502', '503', '504', '505');
        if (!is_null($substatus) && (!in_array($substatus, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'substatus', must be one of '100', '101', '200', '201', '202', '203', '204', '205', '206', '300', '301', '302', '303', '304', '305', '306', '307', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '426', '500', '501', '502', '503', '504', '505'");
        }
        $this->container['substatus'] = $substatus;

        return $this;
    }

    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     * @param string $message
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

