<?php
/**
 * AssetServerLinks
 *
 * PHP version 5
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PI Web API 2017 Swagger Spec
 *
 * Swagger Spec file that describes PI Web API
 *
 * OpenAPI spec version: 1.9.0.235
 * Contact: techsupport@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PIWebAPI\Client\Model;

use \ArrayAccess;

/**
 * AssetServerLinks Class Doc Comment
 *
 * @category    Class */
/**
 * @package     PIWebAPI\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AssetServerLinks implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AssetServer_Links';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'self' => 'string',
        'databases' => 'string',
        'security_identities' => 'string',
        'security_mappings' => 'string',
        'unit_classes' => 'string',
        'analysis_rule_plug_ins' => 'string',
        'time_rule_plug_ins' => 'string',
        'security' => 'string',
        'security_entries' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'Self',
        'databases' => 'Databases',
        'security_identities' => 'SecurityIdentities',
        'security_mappings' => 'SecurityMappings',
        'unit_classes' => 'UnitClasses',
        'analysis_rule_plug_ins' => 'AnalysisRulePlugIns',
        'time_rule_plug_ins' => 'TimeRulePlugIns',
        'security' => 'Security',
        'security_entries' => 'SecurityEntries'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'databases' => 'setDatabases',
        'security_identities' => 'setSecurityIdentities',
        'security_mappings' => 'setSecurityMappings',
        'unit_classes' => 'setUnitClasses',
        'analysis_rule_plug_ins' => 'setAnalysisRulePlugIns',
        'time_rule_plug_ins' => 'setTimeRulePlugIns',
        'security' => 'setSecurity',
        'security_entries' => 'setSecurityEntries'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'databases' => 'getDatabases',
        'security_identities' => 'getSecurityIdentities',
        'security_mappings' => 'getSecurityMappings',
        'unit_classes' => 'getUnitClasses',
        'analysis_rule_plug_ins' => 'getAnalysisRulePlugIns',
        'time_rule_plug_ins' => 'getTimeRulePlugIns',
        'security' => 'getSecurity',
        'security_entries' => 'getSecurityEntries'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['self'] = isset($data['self']) ? $data['self'] : null;
        $this->container['databases'] = isset($data['databases']) ? $data['databases'] : null;
        $this->container['security_identities'] = isset($data['security_identities']) ? $data['security_identities'] : null;
        $this->container['security_mappings'] = isset($data['security_mappings']) ? $data['security_mappings'] : null;
        $this->container['unit_classes'] = isset($data['unit_classes']) ? $data['unit_classes'] : null;
        $this->container['analysis_rule_plug_ins'] = isset($data['analysis_rule_plug_ins']) ? $data['analysis_rule_plug_ins'] : null;
        $this->container['time_rule_plug_ins'] = isset($data['time_rule_plug_ins']) ? $data['time_rule_plug_ins'] : null;
        $this->container['security'] = isset($data['security']) ? $data['security'] : null;
        $this->container['security_entries'] = isset($data['security_entries']) ? $data['security_entries'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets self
     * @return string
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     * @param string $self
     * @return $this
     */
    public function setSelf($self)
    {
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets databases
     * @return string
     */
    public function getDatabases()
    {
        return $this->container['databases'];
    }

    /**
     * Sets databases
     * @param string $databases
     * @return $this
     */
    public function setDatabases($databases)
    {
        $this->container['databases'] = $databases;

        return $this;
    }

    /**
     * Gets security_identities
     * @return string
     */
    public function getSecurityIdentities()
    {
        return $this->container['security_identities'];
    }

    /**
     * Sets security_identities
     * @param string $security_identities
     * @return $this
     */
    public function setSecurityIdentities($security_identities)
    {
        $this->container['security_identities'] = $security_identities;

        return $this;
    }

    /**
     * Gets security_mappings
     * @return string
     */
    public function getSecurityMappings()
    {
        return $this->container['security_mappings'];
    }

    /**
     * Sets security_mappings
     * @param string $security_mappings
     * @return $this
     */
    public function setSecurityMappings($security_mappings)
    {
        $this->container['security_mappings'] = $security_mappings;

        return $this;
    }

    /**
     * Gets unit_classes
     * @return string
     */
    public function getUnitClasses()
    {
        return $this->container['unit_classes'];
    }

    /**
     * Sets unit_classes
     * @param string $unit_classes
     * @return $this
     */
    public function setUnitClasses($unit_classes)
    {
        $this->container['unit_classes'] = $unit_classes;

        return $this;
    }

    /**
     * Gets analysis_rule_plug_ins
     * @return string
     */
    public function getAnalysisRulePlugIns()
    {
        return $this->container['analysis_rule_plug_ins'];
    }

    /**
     * Sets analysis_rule_plug_ins
     * @param string $analysis_rule_plug_ins
     * @return $this
     */
    public function setAnalysisRulePlugIns($analysis_rule_plug_ins)
    {
        $this->container['analysis_rule_plug_ins'] = $analysis_rule_plug_ins;

        return $this;
    }

    /**
     * Gets time_rule_plug_ins
     * @return string
     */
    public function getTimeRulePlugIns()
    {
        return $this->container['time_rule_plug_ins'];
    }

    /**
     * Sets time_rule_plug_ins
     * @param string $time_rule_plug_ins
     * @return $this
     */
    public function setTimeRulePlugIns($time_rule_plug_ins)
    {
        $this->container['time_rule_plug_ins'] = $time_rule_plug_ins;

        return $this;
    }

    /**
     * Gets security
     * @return string
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     * @param string $security
     * @return $this
     */
    public function setSecurity($security)
    {
        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets security_entries
     * @return string
     */
    public function getSecurityEntries()
    {
        return $this->container['security_entries'];
    }

    /**
     * Sets security_entries
     * @param string $security_entries
     * @return $this
     */
    public function setSecurityEntries($security_entries)
    {
        $this->container['security_entries'] = $security_entries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

