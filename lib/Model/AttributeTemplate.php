<?php
/**
 * AttributeTemplate
 *
 * PHP version 5
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PI Web API 2017 Swagger Spec
 *
 * Swagger Spec file that describes PI Web API
 *
 * OpenAPI spec version: 1.9.0.235
 * Contact: techsupport@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PIWebAPI\Client\Model;

use \ArrayAccess;

/**
 * AttributeTemplate Class Doc Comment
 *
 * @category    Class */
/**
 * @package     PIWebAPI\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AttributeTemplate implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AttributeTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'web_id' => 'string',
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'path' => 'string',
        'type' => 'string',
        'type_qualifier' => 'string',
        'default_units_name' => 'string',
        'default_value' => 'object',
        'data_reference_plug_in' => 'string',
        'config_string' => 'string',
        'is_configuration_item' => 'bool',
        'is_excluded' => 'bool',
        'is_hidden' => 'bool',
        'is_manual_data_entry' => 'bool',
        'has_children' => 'bool',
        'category_names' => 'string[]',
        'trait_name' => 'string',
        'links' => '\PIWebAPI\Client\Model\AttributeTemplateLinks'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'web_id' => 'WebId',
        'id' => 'Id',
        'name' => 'Name',
        'description' => 'Description',
        'path' => 'Path',
        'type' => 'Type',
        'type_qualifier' => 'TypeQualifier',
        'default_units_name' => 'DefaultUnitsName',
        'default_value' => 'DefaultValue',
        'data_reference_plug_in' => 'DataReferencePlugIn',
        'config_string' => 'ConfigString',
        'is_configuration_item' => 'IsConfigurationItem',
        'is_excluded' => 'IsExcluded',
        'is_hidden' => 'IsHidden',
        'is_manual_data_entry' => 'IsManualDataEntry',
        'has_children' => 'HasChildren',
        'category_names' => 'CategoryNames',
        'trait_name' => 'TraitName',
        'links' => 'Links'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'web_id' => 'setWebId',
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'path' => 'setPath',
        'type' => 'setType',
        'type_qualifier' => 'setTypeQualifier',
        'default_units_name' => 'setDefaultUnitsName',
        'default_value' => 'setDefaultValue',
        'data_reference_plug_in' => 'setDataReferencePlugIn',
        'config_string' => 'setConfigString',
        'is_configuration_item' => 'setIsConfigurationItem',
        'is_excluded' => 'setIsExcluded',
        'is_hidden' => 'setIsHidden',
        'is_manual_data_entry' => 'setIsManualDataEntry',
        'has_children' => 'setHasChildren',
        'category_names' => 'setCategoryNames',
        'trait_name' => 'setTraitName',
        'links' => 'setLinks'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'web_id' => 'getWebId',
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'path' => 'getPath',
        'type' => 'getType',
        'type_qualifier' => 'getTypeQualifier',
        'default_units_name' => 'getDefaultUnitsName',
        'default_value' => 'getDefaultValue',
        'data_reference_plug_in' => 'getDataReferencePlugIn',
        'config_string' => 'getConfigString',
        'is_configuration_item' => 'getIsConfigurationItem',
        'is_excluded' => 'getIsExcluded',
        'is_hidden' => 'getIsHidden',
        'is_manual_data_entry' => 'getIsManualDataEntry',
        'has_children' => 'getHasChildren',
        'category_names' => 'getCategoryNames',
        'trait_name' => 'getTraitName',
        'links' => 'getLinks'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['web_id'] = isset($data['web_id']) ? $data['web_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['type_qualifier'] = isset($data['type_qualifier']) ? $data['type_qualifier'] : null;
        $this->container['default_units_name'] = isset($data['default_units_name']) ? $data['default_units_name'] : null;
        $this->container['default_value'] = isset($data['default_value']) ? $data['default_value'] : null;
        $this->container['data_reference_plug_in'] = isset($data['data_reference_plug_in']) ? $data['data_reference_plug_in'] : null;
        $this->container['config_string'] = isset($data['config_string']) ? $data['config_string'] : null;
        $this->container['is_configuration_item'] = isset($data['is_configuration_item']) ? $data['is_configuration_item'] : null;
        $this->container['is_excluded'] = isset($data['is_excluded']) ? $data['is_excluded'] : null;
        $this->container['is_hidden'] = isset($data['is_hidden']) ? $data['is_hidden'] : null;
        $this->container['is_manual_data_entry'] = isset($data['is_manual_data_entry']) ? $data['is_manual_data_entry'] : null;
        $this->container['has_children'] = isset($data['has_children']) ? $data['has_children'] : null;
        $this->container['category_names'] = isset($data['category_names']) ? $data['category_names'] : null;
        $this->container['trait_name'] = isset($data['trait_name']) ? $data['trait_name'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets web_id
     * @return string
     */
    public function getWebId()
    {
        return $this->container['web_id'];
    }

    /**
     * Sets web_id
     * @param string $web_id
     * @return $this
     */
    public function setWebId($web_id)
    {
        $this->container['web_id'] = $web_id;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets path
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     * @param string $path
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets type_qualifier
     * @return string
     */
    public function getTypeQualifier()
    {
        return $this->container['type_qualifier'];
    }

    /**
     * Sets type_qualifier
     * @param string $type_qualifier
     * @return $this
     */
    public function setTypeQualifier($type_qualifier)
    {
        $this->container['type_qualifier'] = $type_qualifier;

        return $this;
    }

    /**
     * Gets default_units_name
     * @return string
     */
    public function getDefaultUnitsName()
    {
        return $this->container['default_units_name'];
    }

    /**
     * Sets default_units_name
     * @param string $default_units_name
     * @return $this
     */
    public function setDefaultUnitsName($default_units_name)
    {
        $this->container['default_units_name'] = $default_units_name;

        return $this;
    }

    /**
     * Gets default_value
     * @return object
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     * @param object $default_value
     * @return $this
     */
    public function setDefaultValue($default_value)
    {
        $this->container['default_value'] = $default_value;

        return $this;
    }

    /**
     * Gets data_reference_plug_in
     * @return string
     */
    public function getDataReferencePlugIn()
    {
        return $this->container['data_reference_plug_in'];
    }

    /**
     * Sets data_reference_plug_in
     * @param string $data_reference_plug_in
     * @return $this
     */
    public function setDataReferencePlugIn($data_reference_plug_in)
    {
        $this->container['data_reference_plug_in'] = $data_reference_plug_in;

        return $this;
    }

    /**
     * Gets config_string
     * @return string
     */
    public function getConfigString()
    {
        return $this->container['config_string'];
    }

    /**
     * Sets config_string
     * @param string $config_string
     * @return $this
     */
    public function setConfigString($config_string)
    {
        $this->container['config_string'] = $config_string;

        return $this;
    }

    /**
     * Gets is_configuration_item
     * @return bool
     */
    public function getIsConfigurationItem()
    {
        return $this->container['is_configuration_item'];
    }

    /**
     * Sets is_configuration_item
     * @param bool $is_configuration_item
     * @return $this
     */
    public function setIsConfigurationItem($is_configuration_item)
    {
        $this->container['is_configuration_item'] = $is_configuration_item;

        return $this;
    }

    /**
     * Gets is_excluded
     * @return bool
     */
    public function getIsExcluded()
    {
        return $this->container['is_excluded'];
    }

    /**
     * Sets is_excluded
     * @param bool $is_excluded
     * @return $this
     */
    public function setIsExcluded($is_excluded)
    {
        $this->container['is_excluded'] = $is_excluded;

        return $this;
    }

    /**
     * Gets is_hidden
     * @return bool
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     * @param bool $is_hidden
     * @return $this
     */
    public function setIsHidden($is_hidden)
    {
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets is_manual_data_entry
     * @return bool
     */
    public function getIsManualDataEntry()
    {
        return $this->container['is_manual_data_entry'];
    }

    /**
     * Sets is_manual_data_entry
     * @param bool $is_manual_data_entry
     * @return $this
     */
    public function setIsManualDataEntry($is_manual_data_entry)
    {
        $this->container['is_manual_data_entry'] = $is_manual_data_entry;

        return $this;
    }

    /**
     * Gets has_children
     * @return bool
     */
    public function getHasChildren()
    {
        return $this->container['has_children'];
    }

    /**
     * Sets has_children
     * @param bool $has_children
     * @return $this
     */
    public function setHasChildren($has_children)
    {
        $this->container['has_children'] = $has_children;

        return $this;
    }

    /**
     * Gets category_names
     * @return string[]
     */
    public function getCategoryNames()
    {
        return $this->container['category_names'];
    }

    /**
     * Sets category_names
     * @param string[] $category_names
     * @return $this
     */
    public function setCategoryNames($category_names)
    {
        $this->container['category_names'] = $category_names;

        return $this;
    }

    /**
     * Gets trait_name
     * @return string
     */
    public function getTraitName()
    {
        return $this->container['trait_name'];
    }

    /**
     * Sets trait_name
     * @param string $trait_name
     * @return $this
     */
    public function setTraitName($trait_name)
    {
        $this->container['trait_name'] = $trait_name;

        return $this;
    }

    /**
     * Gets links
     * @return \PIWebAPI\Client\Model\AttributeTemplateLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     * @param \PIWebAPI\Client\Model\AttributeTemplateLinks $links
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

