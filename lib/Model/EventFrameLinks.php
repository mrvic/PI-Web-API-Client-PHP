<?php
/**
 * EventFrameLinks
 *
 * PHP version 5
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PI Web API 2017 Swagger Spec
 *
 * Swagger Spec file that describes PI Web API
 *
 * OpenAPI spec version: 1.9.0.235
 * Contact: techsupport@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PIWebAPI\Client\Model;

use \ArrayAccess;

/**
 * EventFrameLinks Class Doc Comment
 *
 * @category    Class */
/**
 * @package     PIWebAPI\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EventFrameLinks implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'EventFrame_Links';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'self' => 'string',
        'attributes' => 'string',
        'event_frames' => 'string',
        'database' => 'string',
        'referenced_elements' => 'string',
        'primary_referenced_element' => 'string',
        'parent' => 'string',
        'template' => 'string',
        'default_attribute' => 'string',
        'categories' => 'string',
        'annotations' => 'string',
        'interpolated_data' => 'string',
        'recorded_data' => 'string',
        'plot_data' => 'string',
        'summary_data' => 'string',
        'value' => 'string',
        'end_value' => 'string',
        'security' => 'string',
        'security_entries' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'Self',
        'attributes' => 'Attributes',
        'event_frames' => 'EventFrames',
        'database' => 'Database',
        'referenced_elements' => 'ReferencedElements',
        'primary_referenced_element' => 'PrimaryReferencedElement',
        'parent' => 'Parent',
        'template' => 'Template',
        'default_attribute' => 'DefaultAttribute',
        'categories' => 'Categories',
        'annotations' => 'Annotations',
        'interpolated_data' => 'InterpolatedData',
        'recorded_data' => 'RecordedData',
        'plot_data' => 'PlotData',
        'summary_data' => 'SummaryData',
        'value' => 'Value',
        'end_value' => 'EndValue',
        'security' => 'Security',
        'security_entries' => 'SecurityEntries'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'attributes' => 'setAttributes',
        'event_frames' => 'setEventFrames',
        'database' => 'setDatabase',
        'referenced_elements' => 'setReferencedElements',
        'primary_referenced_element' => 'setPrimaryReferencedElement',
        'parent' => 'setParent',
        'template' => 'setTemplate',
        'default_attribute' => 'setDefaultAttribute',
        'categories' => 'setCategories',
        'annotations' => 'setAnnotations',
        'interpolated_data' => 'setInterpolatedData',
        'recorded_data' => 'setRecordedData',
        'plot_data' => 'setPlotData',
        'summary_data' => 'setSummaryData',
        'value' => 'setValue',
        'end_value' => 'setEndValue',
        'security' => 'setSecurity',
        'security_entries' => 'setSecurityEntries'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'attributes' => 'getAttributes',
        'event_frames' => 'getEventFrames',
        'database' => 'getDatabase',
        'referenced_elements' => 'getReferencedElements',
        'primary_referenced_element' => 'getPrimaryReferencedElement',
        'parent' => 'getParent',
        'template' => 'getTemplate',
        'default_attribute' => 'getDefaultAttribute',
        'categories' => 'getCategories',
        'annotations' => 'getAnnotations',
        'interpolated_data' => 'getInterpolatedData',
        'recorded_data' => 'getRecordedData',
        'plot_data' => 'getPlotData',
        'summary_data' => 'getSummaryData',
        'value' => 'getValue',
        'end_value' => 'getEndValue',
        'security' => 'getSecurity',
        'security_entries' => 'getSecurityEntries'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['self'] = isset($data['self']) ? $data['self'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['event_frames'] = isset($data['event_frames']) ? $data['event_frames'] : null;
        $this->container['database'] = isset($data['database']) ? $data['database'] : null;
        $this->container['referenced_elements'] = isset($data['referenced_elements']) ? $data['referenced_elements'] : null;
        $this->container['primary_referenced_element'] = isset($data['primary_referenced_element']) ? $data['primary_referenced_element'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['default_attribute'] = isset($data['default_attribute']) ? $data['default_attribute'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['annotations'] = isset($data['annotations']) ? $data['annotations'] : null;
        $this->container['interpolated_data'] = isset($data['interpolated_data']) ? $data['interpolated_data'] : null;
        $this->container['recorded_data'] = isset($data['recorded_data']) ? $data['recorded_data'] : null;
        $this->container['plot_data'] = isset($data['plot_data']) ? $data['plot_data'] : null;
        $this->container['summary_data'] = isset($data['summary_data']) ? $data['summary_data'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['end_value'] = isset($data['end_value']) ? $data['end_value'] : null;
        $this->container['security'] = isset($data['security']) ? $data['security'] : null;
        $this->container['security_entries'] = isset($data['security_entries']) ? $data['security_entries'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets self
     * @return string
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     * @param string $self
     * @return $this
     */
    public function setSelf($self)
    {
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets attributes
     * @return string
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     * @param string $attributes
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets event_frames
     * @return string
     */
    public function getEventFrames()
    {
        return $this->container['event_frames'];
    }

    /**
     * Sets event_frames
     * @param string $event_frames
     * @return $this
     */
    public function setEventFrames($event_frames)
    {
        $this->container['event_frames'] = $event_frames;

        return $this;
    }

    /**
     * Gets database
     * @return string
     */
    public function getDatabase()
    {
        return $this->container['database'];
    }

    /**
     * Sets database
     * @param string $database
     * @return $this
     */
    public function setDatabase($database)
    {
        $this->container['database'] = $database;

        return $this;
    }

    /**
     * Gets referenced_elements
     * @return string
     */
    public function getReferencedElements()
    {
        return $this->container['referenced_elements'];
    }

    /**
     * Sets referenced_elements
     * @param string $referenced_elements
     * @return $this
     */
    public function setReferencedElements($referenced_elements)
    {
        $this->container['referenced_elements'] = $referenced_elements;

        return $this;
    }

    /**
     * Gets primary_referenced_element
     * @return string
     */
    public function getPrimaryReferencedElement()
    {
        return $this->container['primary_referenced_element'];
    }

    /**
     * Sets primary_referenced_element
     * @param string $primary_referenced_element
     * @return $this
     */
    public function setPrimaryReferencedElement($primary_referenced_element)
    {
        $this->container['primary_referenced_element'] = $primary_referenced_element;

        return $this;
    }

    /**
     * Gets parent
     * @return string
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     * @param string $parent
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets template
     * @return string
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     * @param string $template
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets default_attribute
     * @return string
     */
    public function getDefaultAttribute()
    {
        return $this->container['default_attribute'];
    }

    /**
     * Sets default_attribute
     * @param string $default_attribute
     * @return $this
     */
    public function setDefaultAttribute($default_attribute)
    {
        $this->container['default_attribute'] = $default_attribute;

        return $this;
    }

    /**
     * Gets categories
     * @return string
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     * @param string $categories
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets annotations
     * @return string
     */
    public function getAnnotations()
    {
        return $this->container['annotations'];
    }

    /**
     * Sets annotations
     * @param string $annotations
     * @return $this
     */
    public function setAnnotations($annotations)
    {
        $this->container['annotations'] = $annotations;

        return $this;
    }

    /**
     * Gets interpolated_data
     * @return string
     */
    public function getInterpolatedData()
    {
        return $this->container['interpolated_data'];
    }

    /**
     * Sets interpolated_data
     * @param string $interpolated_data
     * @return $this
     */
    public function setInterpolatedData($interpolated_data)
    {
        $this->container['interpolated_data'] = $interpolated_data;

        return $this;
    }

    /**
     * Gets recorded_data
     * @return string
     */
    public function getRecordedData()
    {
        return $this->container['recorded_data'];
    }

    /**
     * Sets recorded_data
     * @param string $recorded_data
     * @return $this
     */
    public function setRecordedData($recorded_data)
    {
        $this->container['recorded_data'] = $recorded_data;

        return $this;
    }

    /**
     * Gets plot_data
     * @return string
     */
    public function getPlotData()
    {
        return $this->container['plot_data'];
    }

    /**
     * Sets plot_data
     * @param string $plot_data
     * @return $this
     */
    public function setPlotData($plot_data)
    {
        $this->container['plot_data'] = $plot_data;

        return $this;
    }

    /**
     * Gets summary_data
     * @return string
     */
    public function getSummaryData()
    {
        return $this->container['summary_data'];
    }

    /**
     * Sets summary_data
     * @param string $summary_data
     * @return $this
     */
    public function setSummaryData($summary_data)
    {
        $this->container['summary_data'] = $summary_data;

        return $this;
    }

    /**
     * Gets value
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param string $value
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets end_value
     * @return string
     */
    public function getEndValue()
    {
        return $this->container['end_value'];
    }

    /**
     * Sets end_value
     * @param string $end_value
     * @return $this
     */
    public function setEndValue($end_value)
    {
        $this->container['end_value'] = $end_value;

        return $this;
    }

    /**
     * Gets security
     * @return string
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     * @param string $security
     * @return $this
     */
    public function setSecurity($security)
    {
        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets security_entries
     * @return string
     */
    public function getSecurityEntries()
    {
        return $this->container['security_entries'];
    }

    /**
     * Sets security_entries
     * @param string $security_entries
     * @return $this
     */
    public function setSecurityEntries($security_entries)
    {
        $this->container['security_entries'] = $security_entries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

