<?php
/**
 * AnalysisRulePlugIn
 *
 * PHP version 5
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PI Web API 2017 Swagger Spec
 *
 * Swagger Spec file that describes PI Web API
 *
 * OpenAPI spec version: 1.9.0.235
 * Contact: techsupport@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PIWebAPI\Client\Model;

use \ArrayAccess;

/**
 * AnalysisRulePlugIn Class Doc Comment
 *
 * @category    Class */
/**
 * @package     PIWebAPI\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AnalysisRulePlugIn implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AnalysisRulePlugIn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'web_id' => 'string',
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'path' => 'string',
        'assembly_file_name' => 'string',
        'assembly_id' => 'string',
        'assembly_load_properties' => 'string[]',
        'assembly_time' => '\DateTime',
        'compatibility_version' => 'int',
        'is_browsable' => 'bool',
        'is_non_editable_config' => 'bool',
        'loaded_assembly_time' => '\DateTime',
        'loaded_version' => 'string',
        'version' => 'string',
        'links' => '\PIWebAPI\Client\Model\AnalysisRulePlugInLinks'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'web_id' => 'WebId',
        'id' => 'Id',
        'name' => 'Name',
        'description' => 'Description',
        'path' => 'Path',
        'assembly_file_name' => 'AssemblyFileName',
        'assembly_id' => 'AssemblyID',
        'assembly_load_properties' => 'AssemblyLoadProperties',
        'assembly_time' => 'AssemblyTime',
        'compatibility_version' => 'CompatibilityVersion',
        'is_browsable' => 'IsBrowsable',
        'is_non_editable_config' => 'IsNonEditableConfig',
        'loaded_assembly_time' => 'LoadedAssemblyTime',
        'loaded_version' => 'LoadedVersion',
        'version' => 'Version',
        'links' => 'Links'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'web_id' => 'setWebId',
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'path' => 'setPath',
        'assembly_file_name' => 'setAssemblyFileName',
        'assembly_id' => 'setAssemblyId',
        'assembly_load_properties' => 'setAssemblyLoadProperties',
        'assembly_time' => 'setAssemblyTime',
        'compatibility_version' => 'setCompatibilityVersion',
        'is_browsable' => 'setIsBrowsable',
        'is_non_editable_config' => 'setIsNonEditableConfig',
        'loaded_assembly_time' => 'setLoadedAssemblyTime',
        'loaded_version' => 'setLoadedVersion',
        'version' => 'setVersion',
        'links' => 'setLinks'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'web_id' => 'getWebId',
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'path' => 'getPath',
        'assembly_file_name' => 'getAssemblyFileName',
        'assembly_id' => 'getAssemblyId',
        'assembly_load_properties' => 'getAssemblyLoadProperties',
        'assembly_time' => 'getAssemblyTime',
        'compatibility_version' => 'getCompatibilityVersion',
        'is_browsable' => 'getIsBrowsable',
        'is_non_editable_config' => 'getIsNonEditableConfig',
        'loaded_assembly_time' => 'getLoadedAssemblyTime',
        'loaded_version' => 'getLoadedVersion',
        'version' => 'getVersion',
        'links' => 'getLinks'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['web_id'] = isset($data['web_id']) ? $data['web_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['assembly_file_name'] = isset($data['assembly_file_name']) ? $data['assembly_file_name'] : null;
        $this->container['assembly_id'] = isset($data['assembly_id']) ? $data['assembly_id'] : null;
        $this->container['assembly_load_properties'] = isset($data['assembly_load_properties']) ? $data['assembly_load_properties'] : null;
        $this->container['assembly_time'] = isset($data['assembly_time']) ? $data['assembly_time'] : null;
        $this->container['compatibility_version'] = isset($data['compatibility_version']) ? $data['compatibility_version'] : null;
        $this->container['is_browsable'] = isset($data['is_browsable']) ? $data['is_browsable'] : null;
        $this->container['is_non_editable_config'] = isset($data['is_non_editable_config']) ? $data['is_non_editable_config'] : null;
        $this->container['loaded_assembly_time'] = isset($data['loaded_assembly_time']) ? $data['loaded_assembly_time'] : null;
        $this->container['loaded_version'] = isset($data['loaded_version']) ? $data['loaded_version'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets web_id
     * @return string
     */
    public function getWebId()
    {
        return $this->container['web_id'];
    }

    /**
     * Sets web_id
     * @param string $web_id
     * @return $this
     */
    public function setWebId($web_id)
    {
        $this->container['web_id'] = $web_id;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets path
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     * @param string $path
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets assembly_file_name
     * @return string
     */
    public function getAssemblyFileName()
    {
        return $this->container['assembly_file_name'];
    }

    /**
     * Sets assembly_file_name
     * @param string $assembly_file_name
     * @return $this
     */
    public function setAssemblyFileName($assembly_file_name)
    {
        $this->container['assembly_file_name'] = $assembly_file_name;

        return $this;
    }

    /**
     * Gets assembly_id
     * @return string
     */
    public function getAssemblyId()
    {
        return $this->container['assembly_id'];
    }

    /**
     * Sets assembly_id
     * @param string $assembly_id
     * @return $this
     */
    public function setAssemblyId($assembly_id)
    {
        $this->container['assembly_id'] = $assembly_id;

        return $this;
    }

    /**
     * Gets assembly_load_properties
     * @return string[]
     */
    public function getAssemblyLoadProperties()
    {
        return $this->container['assembly_load_properties'];
    }

    /**
     * Sets assembly_load_properties
     * @param string[] $assembly_load_properties
     * @return $this
     */
    public function setAssemblyLoadProperties($assembly_load_properties)
    {
        $this->container['assembly_load_properties'] = $assembly_load_properties;

        return $this;
    }

    /**
     * Gets assembly_time
     * @return \DateTime
     */
    public function getAssemblyTime()
    {
        return $this->container['assembly_time'];
    }

    /**
     * Sets assembly_time
     * @param \DateTime $assembly_time
     * @return $this
     */
    public function setAssemblyTime($assembly_time)
    {
        $this->container['assembly_time'] = $assembly_time;

        return $this;
    }

    /**
     * Gets compatibility_version
     * @return int
     */
    public function getCompatibilityVersion()
    {
        return $this->container['compatibility_version'];
    }

    /**
     * Sets compatibility_version
     * @param int $compatibility_version
     * @return $this
     */
    public function setCompatibilityVersion($compatibility_version)
    {
        $this->container['compatibility_version'] = $compatibility_version;

        return $this;
    }

    /**
     * Gets is_browsable
     * @return bool
     */
    public function getIsBrowsable()
    {
        return $this->container['is_browsable'];
    }

    /**
     * Sets is_browsable
     * @param bool $is_browsable
     * @return $this
     */
    public function setIsBrowsable($is_browsable)
    {
        $this->container['is_browsable'] = $is_browsable;

        return $this;
    }

    /**
     * Gets is_non_editable_config
     * @return bool
     */
    public function getIsNonEditableConfig()
    {
        return $this->container['is_non_editable_config'];
    }

    /**
     * Sets is_non_editable_config
     * @param bool $is_non_editable_config
     * @return $this
     */
    public function setIsNonEditableConfig($is_non_editable_config)
    {
        $this->container['is_non_editable_config'] = $is_non_editable_config;

        return $this;
    }

    /**
     * Gets loaded_assembly_time
     * @return \DateTime
     */
    public function getLoadedAssemblyTime()
    {
        return $this->container['loaded_assembly_time'];
    }

    /**
     * Sets loaded_assembly_time
     * @param \DateTime $loaded_assembly_time
     * @return $this
     */
    public function setLoadedAssemblyTime($loaded_assembly_time)
    {
        $this->container['loaded_assembly_time'] = $loaded_assembly_time;

        return $this;
    }

    /**
     * Gets loaded_version
     * @return string
     */
    public function getLoadedVersion()
    {
        return $this->container['loaded_version'];
    }

    /**
     * Sets loaded_version
     * @param string $loaded_version
     * @return $this
     */
    public function setLoadedVersion($loaded_version)
    {
        $this->container['loaded_version'] = $loaded_version;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets links
     * @return \PIWebAPI\Client\Model\AnalysisRulePlugInLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     * @param \PIWebAPI\Client\Model\AnalysisRulePlugInLinks $links
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

