<?php
/**
 * TimedValue
 *
 * PHP version 5
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PI Web API 2017 Swagger Spec
 *
 * Swagger Spec file that describes PI Web API
 *
 * OpenAPI spec version: 1.9.0.235
 * Contact: techsupport@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PIWebAPI\Client\Model;

use \ArrayAccess;

/**
 * TimedValue Class Doc Comment
 *
 * @category    Class */
/**
 * @package     PIWebAPI\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TimedValue implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TimedValue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timestamp' => '\DateTime',
        'units_abbreviation' => 'string',
        'good' => 'bool',
        'questionable' => 'bool',
        'substituted' => 'bool',
        'value' => 'object',
        'exception' => '\PIWebAPI\Client\Model\Errors'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'timestamp' => 'Timestamp',
        'units_abbreviation' => 'UnitsAbbreviation',
        'good' => 'Good',
        'questionable' => 'Questionable',
        'substituted' => 'Substituted',
        'value' => 'Value',
        'exception' => 'Exception'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'timestamp' => 'setTimestamp',
        'units_abbreviation' => 'setUnitsAbbreviation',
        'good' => 'setGood',
        'questionable' => 'setQuestionable',
        'substituted' => 'setSubstituted',
        'value' => 'setValue',
        'exception' => 'setException'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'timestamp' => 'getTimestamp',
        'units_abbreviation' => 'getUnitsAbbreviation',
        'good' => 'getGood',
        'questionable' => 'getQuestionable',
        'substituted' => 'getSubstituted',
        'value' => 'getValue',
        'exception' => 'getException'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['units_abbreviation'] = isset($data['units_abbreviation']) ? $data['units_abbreviation'] : null;
        $this->container['good'] = isset($data['good']) ? $data['good'] : null;
        $this->container['questionable'] = isset($data['questionable']) ? $data['questionable'] : null;
        $this->container['substituted'] = isset($data['substituted']) ? $data['substituted'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['exception'] = isset($data['exception']) ? $data['exception'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets timestamp
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     * @param \DateTime $timestamp
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets units_abbreviation
     * @return string
     */
    public function getUnitsAbbreviation()
    {
        return $this->container['units_abbreviation'];
    }

    /**
     * Sets units_abbreviation
     * @param string $units_abbreviation
     * @return $this
     */
    public function setUnitsAbbreviation($units_abbreviation)
    {
        $this->container['units_abbreviation'] = $units_abbreviation;

        return $this;
    }

    /**
     * Gets good
     * @return bool
     */
    public function getGood()
    {
        return $this->container['good'];
    }

    /**
     * Sets good
     * @param bool $good
     * @return $this
     */
    public function setGood($good)
    {
        $this->container['good'] = $good;

        return $this;
    }

    /**
     * Gets questionable
     * @return bool
     */
    public function getQuestionable()
    {
        return $this->container['questionable'];
    }

    /**
     * Sets questionable
     * @param bool $questionable
     * @return $this
     */
    public function setQuestionable($questionable)
    {
        $this->container['questionable'] = $questionable;

        return $this;
    }

    /**
     * Gets substituted
     * @return bool
     */
    public function getSubstituted()
    {
        return $this->container['substituted'];
    }

    /**
     * Sets substituted
     * @param bool $substituted
     * @return $this
     */
    public function setSubstituted($substituted)
    {
        $this->container['substituted'] = $substituted;

        return $this;
    }

    /**
     * Gets value
     * @return object
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param object $value
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets exception
     * @return \PIWebAPI\Client\Model\Errors
     */
    public function getException()
    {
        return $this->container['exception'];
    }

    /**
     * Sets exception
     * @param \PIWebAPI\Client\Model\Errors $exception
     * @return $this
     */
    public function setException($exception)
    {
        $this->container['exception'] = $exception;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

