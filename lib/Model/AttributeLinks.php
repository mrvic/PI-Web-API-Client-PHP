<?php
/**
 * AttributeLinks
 *
 * PHP version 5
 *
 * @category Class
 * @package  PIWebAPI\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PI Web API 2017 Swagger Spec
 *
 * Swagger Spec file that describes PI Web API
 *
 * OpenAPI spec version: 1.9.0.235
 * Contact: techsupport@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PIWebAPI\Client\Model;

use \ArrayAccess;

/**
 * AttributeLinks Class Doc Comment
 *
 * @category    Class */
/**
 * @package     PIWebAPI\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AttributeLinks implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Attribute_Links';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'self' => 'string',
        'attributes' => 'string',
        'element' => 'string',
        'event_frame' => 'string',
        'parent' => 'string',
        'template' => 'string',
        'interpolated_data' => 'string',
        'recorded_data' => 'string',
        'plot_data' => 'string',
        'summary_data' => 'string',
        'value' => 'string',
        'end_value' => 'string',
        'point' => 'string',
        'categories' => 'string',
        'enumeration_set' => 'string',
        'trait' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'Self',
        'attributes' => 'Attributes',
        'element' => 'Element',
        'event_frame' => 'EventFrame',
        'parent' => 'Parent',
        'template' => 'Template',
        'interpolated_data' => 'InterpolatedData',
        'recorded_data' => 'RecordedData',
        'plot_data' => 'PlotData',
        'summary_data' => 'SummaryData',
        'value' => 'Value',
        'end_value' => 'EndValue',
        'point' => 'Point',
        'categories' => 'Categories',
        'enumeration_set' => 'EnumerationSet',
        'trait' => 'Trait'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'attributes' => 'setAttributes',
        'element' => 'setElement',
        'event_frame' => 'setEventFrame',
        'parent' => 'setParent',
        'template' => 'setTemplate',
        'interpolated_data' => 'setInterpolatedData',
        'recorded_data' => 'setRecordedData',
        'plot_data' => 'setPlotData',
        'summary_data' => 'setSummaryData',
        'value' => 'setValue',
        'end_value' => 'setEndValue',
        'point' => 'setPoint',
        'categories' => 'setCategories',
        'enumeration_set' => 'setEnumerationSet',
        'trait' => 'setTrait'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'attributes' => 'getAttributes',
        'element' => 'getElement',
        'event_frame' => 'getEventFrame',
        'parent' => 'getParent',
        'template' => 'getTemplate',
        'interpolated_data' => 'getInterpolatedData',
        'recorded_data' => 'getRecordedData',
        'plot_data' => 'getPlotData',
        'summary_data' => 'getSummaryData',
        'value' => 'getValue',
        'end_value' => 'getEndValue',
        'point' => 'getPoint',
        'categories' => 'getCategories',
        'enumeration_set' => 'getEnumerationSet',
        'trait' => 'getTrait'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['self'] = isset($data['self']) ? $data['self'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['element'] = isset($data['element']) ? $data['element'] : null;
        $this->container['event_frame'] = isset($data['event_frame']) ? $data['event_frame'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['interpolated_data'] = isset($data['interpolated_data']) ? $data['interpolated_data'] : null;
        $this->container['recorded_data'] = isset($data['recorded_data']) ? $data['recorded_data'] : null;
        $this->container['plot_data'] = isset($data['plot_data']) ? $data['plot_data'] : null;
        $this->container['summary_data'] = isset($data['summary_data']) ? $data['summary_data'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['end_value'] = isset($data['end_value']) ? $data['end_value'] : null;
        $this->container['point'] = isset($data['point']) ? $data['point'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['enumeration_set'] = isset($data['enumeration_set']) ? $data['enumeration_set'] : null;
        $this->container['trait'] = isset($data['trait']) ? $data['trait'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets self
     * @return string
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     * @param string $self
     * @return $this
     */
    public function setSelf($self)
    {
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets attributes
     * @return string
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     * @param string $attributes
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets element
     * @return string
     */
    public function getElement()
    {
        return $this->container['element'];
    }

    /**
     * Sets element
     * @param string $element
     * @return $this
     */
    public function setElement($element)
    {
        $this->container['element'] = $element;

        return $this;
    }

    /**
     * Gets event_frame
     * @return string
     */
    public function getEventFrame()
    {
        return $this->container['event_frame'];
    }

    /**
     * Sets event_frame
     * @param string $event_frame
     * @return $this
     */
    public function setEventFrame($event_frame)
    {
        $this->container['event_frame'] = $event_frame;

        return $this;
    }

    /**
     * Gets parent
     * @return string
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     * @param string $parent
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets template
     * @return string
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     * @param string $template
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets interpolated_data
     * @return string
     */
    public function getInterpolatedData()
    {
        return $this->container['interpolated_data'];
    }

    /**
     * Sets interpolated_data
     * @param string $interpolated_data
     * @return $this
     */
    public function setInterpolatedData($interpolated_data)
    {
        $this->container['interpolated_data'] = $interpolated_data;

        return $this;
    }

    /**
     * Gets recorded_data
     * @return string
     */
    public function getRecordedData()
    {
        return $this->container['recorded_data'];
    }

    /**
     * Sets recorded_data
     * @param string $recorded_data
     * @return $this
     */
    public function setRecordedData($recorded_data)
    {
        $this->container['recorded_data'] = $recorded_data;

        return $this;
    }

    /**
     * Gets plot_data
     * @return string
     */
    public function getPlotData()
    {
        return $this->container['plot_data'];
    }

    /**
     * Sets plot_data
     * @param string $plot_data
     * @return $this
     */
    public function setPlotData($plot_data)
    {
        $this->container['plot_data'] = $plot_data;

        return $this;
    }

    /**
     * Gets summary_data
     * @return string
     */
    public function getSummaryData()
    {
        return $this->container['summary_data'];
    }

    /**
     * Sets summary_data
     * @param string $summary_data
     * @return $this
     */
    public function setSummaryData($summary_data)
    {
        $this->container['summary_data'] = $summary_data;

        return $this;
    }

    /**
     * Gets value
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param string $value
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets end_value
     * @return string
     */
    public function getEndValue()
    {
        return $this->container['end_value'];
    }

    /**
     * Sets end_value
     * @param string $end_value
     * @return $this
     */
    public function setEndValue($end_value)
    {
        $this->container['end_value'] = $end_value;

        return $this;
    }

    /**
     * Gets point
     * @return string
     */
    public function getPoint()
    {
        return $this->container['point'];
    }

    /**
     * Sets point
     * @param string $point
     * @return $this
     */
    public function setPoint($point)
    {
        $this->container['point'] = $point;

        return $this;
    }

    /**
     * Gets categories
     * @return string
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     * @param string $categories
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets enumeration_set
     * @return string
     */
    public function getEnumerationSet()
    {
        return $this->container['enumeration_set'];
    }

    /**
     * Sets enumeration_set
     * @param string $enumeration_set
     * @return $this
     */
    public function setEnumerationSet($enumeration_set)
    {
        $this->container['enumeration_set'] = $enumeration_set;

        return $this;
    }

    /**
     * Gets trait
     * @return string
     */
    public function getTrait()
    {
        return $this->container['trait'];
    }

    /**
     * Sets trait
     * @param string $trait
     * @return $this
     */
    public function setTrait($trait)
    {
        $this->container['trait'] = $trait;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PIWebAPI\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

