<?php
/**
 * TableApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PI Web API 2017 Swagger Spec
 *
 * Swagger Spec file that describes PI Web API
 *
 * OpenAPI spec version: 1.9.0.235
 * Contact: techsupport@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * TableApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TableApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for tableCreateSecurityEntry
     *
     * Create a security entry owned by the table..
     *
     */
    public function testTableCreateSecurityEntry()
    {

    }

    /**
     * Test case for tableDelete
     *
     * Delete a table..
     *
     */
    public function testTableDelete()
    {

    }

    /**
     * Test case for tableDeleteSecurityEntry
     *
     * Delete a security entry owned by the table..
     *
     */
    public function testTableDeleteSecurityEntry()
    {

    }

    /**
     * Test case for tableGet
     *
     * Retrieve a table..
     *
     */
    public function testTableGet()
    {

    }

    /**
     * Test case for tableGetByPath
     *
     * Retrieve a table by path..
     *
     */
    public function testTableGetByPath()
    {

    }

    /**
     * Test case for tableGetCategories
     *
     * Get a table's categories..
     *
     */
    public function testTableGetCategories()
    {

    }

    /**
     * Test case for tableGetData
     *
     * Get the table's data..
     *
     */
    public function testTableGetData()
    {

    }

    /**
     * Test case for tableGetSecurity
     *
     * Get the security information of the specified security item associated with the table for a specified user..
     *
     */
    public function testTableGetSecurity()
    {

    }

    /**
     * Test case for tableGetSecurityEntries
     *
     * Retrieve the security entries associated with the table based on the specified criteria. By default, all security entries for this table are returned..
     *
     */
    public function testTableGetSecurityEntries()
    {

    }

    /**
     * Test case for tableGetSecurityEntryByName
     *
     * Retrieve the security entry associated with the table with the specified name..
     *
     */
    public function testTableGetSecurityEntryByName()
    {

    }

    /**
     * Test case for tableUpdate
     *
     * Update a table by replacing items in its definition..
     *
     */
    public function testTableUpdate()
    {

    }

    /**
     * Test case for tableUpdateData
     *
     * Update the table's data..
     *
     */
    public function testTableUpdateData()
    {

    }

    /**
     * Test case for tableUpdateSecurityEntry
     *
     * Update a security entry owned by the table..
     *
     */
    public function testTableUpdateSecurityEntry()
    {

    }

}
