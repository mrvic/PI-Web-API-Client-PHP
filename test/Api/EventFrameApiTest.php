<?php
/**
 * EventFrameApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PI Web API 2017 Swagger Spec
 *
 * Swagger Spec file that describes PI Web API
 *
 * OpenAPI spec version: 1.9.0.235
 * Contact: techsupport@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * EventFrameApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventFrameApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for eventFrameAcknowledge
     *
     * Calls the EventFrame's Acknowledge method..
     *
     */
    public function testEventFrameAcknowledge()
    {

    }

    /**
     * Test case for eventFrameCaptureValues
     *
     * Calls the EventFrame's CaptureValues method..
     *
     */
    public function testEventFrameCaptureValues()
    {

    }

    /**
     * Test case for eventFrameCreateAnnotation
     *
     * Create an annotation on an event frame..
     *
     */
    public function testEventFrameCreateAnnotation()
    {

    }

    /**
     * Test case for eventFrameCreateAttribute
     *
     * Create a new attribute of the specified event frame..
     *
     */
    public function testEventFrameCreateAttribute()
    {

    }

    /**
     * Test case for eventFrameCreateConfig
     *
     * Executes the create configuration function of the data references found within the attributes of the event frame, and optionally, its children..
     *
     */
    public function testEventFrameCreateConfig()
    {

    }

    /**
     * Test case for eventFrameCreateEventFrame
     *
     * Create an event frame as a child of the specified event frame..
     *
     */
    public function testEventFrameCreateEventFrame()
    {

    }

    /**
     * Test case for eventFrameCreateSearchByAttribute
     *
     * Create a link for a \"Search EventFrames By Attribute Value\" operation, whose queries are specified in the request content. The SearchRoot is specified by the Web Id of the root EventFrame. If the SearchRoot is not specified, then the search starts at the Asset Database. ElementTemplate must be provided as the Web ID of the ElementTemplate, which are used to create the EventFrames. All the attributes in the queries must be defined as AttributeTemplates on the ElementTemplate. An array of attribute value queries are ANDed together to find the desired Element objects. At least one value query must be specified. There are limitations on SearchOperators..
     *
     */
    public function testEventFrameCreateSearchByAttribute()
    {

    }

    /**
     * Test case for eventFrameCreateSecurityEntry
     *
     * Create a security entry owned by the event frame..
     *
     */
    public function testEventFrameCreateSecurityEntry()
    {

    }

    /**
     * Test case for eventFrameDelete
     *
     * Delete an event frame..
     *
     */
    public function testEventFrameDelete()
    {

    }

    /**
     * Test case for eventFrameDeleteAnnotation
     *
     * Delete an annotation on an event frame..
     *
     */
    public function testEventFrameDeleteAnnotation()
    {

    }

    /**
     * Test case for eventFrameDeleteSecurityEntry
     *
     * Delete a security entry owned by the event frame..
     *
     */
    public function testEventFrameDeleteSecurityEntry()
    {

    }

    /**
     * Test case for eventFrameExecuteSearchByAttribute
     *
     * Execute a \"Search EventFrames By Attribute Value\" operation..
     *
     */
    public function testEventFrameExecuteSearchByAttribute()
    {

    }

    /**
     * Test case for eventFrameFindEventFrameAttributes
     *
     * Retrieves a list of event frame attributes matching the specified filters from the specified event frame..
     *
     */
    public function testEventFrameFindEventFrameAttributes()
    {

    }

    /**
     * Test case for eventFrameGet
     *
     * Retrieve an event frame..
     *
     */
    public function testEventFrameGet()
    {

    }

    /**
     * Test case for eventFrameGetAnnotationById
     *
     * Get a specific annotation on an event frame..
     *
     */
    public function testEventFrameGetAnnotationById()
    {

    }

    /**
     * Test case for eventFrameGetAnnotations
     *
     * Get an event frame's annotations..
     *
     */
    public function testEventFrameGetAnnotations()
    {

    }

    /**
     * Test case for eventFrameGetAttributes
     *
     * Get the attributes of the specified event frame..
     *
     */
    public function testEventFrameGetAttributes()
    {

    }

    /**
     * Test case for eventFrameGetByPath
     *
     * Retrieve an event frame by path..
     *
     */
    public function testEventFrameGetByPath()
    {

    }

    /**
     * Test case for eventFrameGetCategories
     *
     * Get an event frame's categories..
     *
     */
    public function testEventFrameGetCategories()
    {

    }

    /**
     * Test case for eventFrameGetEventFrames
     *
     * Retrieve event frames based on the specified conditions. By default, returns all children of the specified root event frame with a start time in the past 8 hours..
     *
     */
    public function testEventFrameGetEventFrames()
    {

    }

    /**
     * Test case for eventFrameGetMultiple
     *
     * Retrieve multiple event frames by web ids or paths..
     *
     */
    public function testEventFrameGetMultiple()
    {

    }

    /**
     * Test case for eventFrameGetReferencedElements
     *
     * Retrieve the event frame's referenced elements..
     *
     */
    public function testEventFrameGetReferencedElements()
    {

    }

    /**
     * Test case for eventFrameGetSecurity
     *
     * Get the security information of the specified security item associated with the event frame for a specified user..
     *
     */
    public function testEventFrameGetSecurity()
    {

    }

    /**
     * Test case for eventFrameGetSecurityEntries
     *
     * Retrieve the security entries associated with the event frame based on the specified criteria. By default, all security entries for this event frame are returned..
     *
     */
    public function testEventFrameGetSecurityEntries()
    {

    }

    /**
     * Test case for eventFrameGetSecurityEntryByName
     *
     * Retrieve the security entry associated with the event frame with the specified name..
     *
     */
    public function testEventFrameGetSecurityEntryByName()
    {

    }

    /**
     * Test case for eventFrameUpdate
     *
     * Update an event frame by replacing items in its definition..
     *
     */
    public function testEventFrameUpdate()
    {

    }

    /**
     * Test case for eventFrameUpdateAnnotation
     *
     * Update an annotation on an event frame by replacing items in its definition..
     *
     */
    public function testEventFrameUpdateAnnotation()
    {

    }

    /**
     * Test case for eventFrameUpdateSecurityEntry
     *
     * Update a security entry owned by the event frame..
     *
     */
    public function testEventFrameUpdateSecurityEntry()
    {

    }

}
